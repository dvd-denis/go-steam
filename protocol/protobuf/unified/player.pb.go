// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: steammessages_player.steamclient.proto

package unified

import (
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ENotificationSetting int32

const (
	ENotificationSetting_k_ENotificationSettingNotifyUseDefault ENotificationSetting = 0
	ENotificationSetting_k_ENotificationSettingAlways           ENotificationSetting = 1
	ENotificationSetting_k_ENotificationSettingNever            ENotificationSetting = 2
)

// Enum value maps for ENotificationSetting.
var (
	ENotificationSetting_name = map[int32]string{
		0: "k_ENotificationSettingNotifyUseDefault",
		1: "k_ENotificationSettingAlways",
		2: "k_ENotificationSettingNever",
	}
	ENotificationSetting_value = map[string]int32{
		"k_ENotificationSettingNotifyUseDefault": 0,
		"k_ENotificationSettingAlways":           1,
		"k_ENotificationSettingNever":            2,
	}
)

func (x ENotificationSetting) Enum() *ENotificationSetting {
	p := new(ENotificationSetting)
	*p = x
	return p
}

func (x ENotificationSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENotificationSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_player_steamclient_proto_enumTypes[0].Descriptor()
}

func (ENotificationSetting) Type() protoreflect.EnumType {
	return &file_steammessages_player_steamclient_proto_enumTypes[0]
}

func (x ENotificationSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ENotificationSetting) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ENotificationSetting(num)
	return nil
}

// Deprecated: Use ENotificationSetting.Descriptor instead.
func (ENotificationSetting) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{0}
}

type CPlayer_GetMutualFriendsForIncomingInvites_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Request) Reset() {
	*x = CPlayer_GetMutualFriendsForIncomingInvites_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetMutualFriendsForIncomingInvites_Request) ProtoMessage() {}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetMutualFriendsForIncomingInvites_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetMutualFriendsForIncomingInvites_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{0}
}

type CPlayer_IncomingInviteMutualFriendList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid                *uint64  `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MutualFriendAccountIds []uint32 `protobuf:"varint,2,rep,name=mutual_friend_account_ids,json=mutualFriendAccountIds" json:"mutual_friend_account_ids,omitempty"`
}

func (x *CPlayer_IncomingInviteMutualFriendList) Reset() {
	*x = CPlayer_IncomingInviteMutualFriendList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_IncomingInviteMutualFriendList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_IncomingInviteMutualFriendList) ProtoMessage() {}

func (x *CPlayer_IncomingInviteMutualFriendList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_IncomingInviteMutualFriendList.ProtoReflect.Descriptor instead.
func (*CPlayer_IncomingInviteMutualFriendList) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CPlayer_IncomingInviteMutualFriendList) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_IncomingInviteMutualFriendList) GetMutualFriendAccountIds() []uint32 {
	if x != nil {
		return x.MutualFriendAccountIds
	}
	return nil
}

type CPlayer_GetMutualFriendsForIncomingInvites_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncomingInviteMutualFriendsLists []*CPlayer_IncomingInviteMutualFriendList `protobuf:"bytes,1,rep,name=incoming_invite_mutual_friends_lists,json=incomingInviteMutualFriendsLists" json:"incoming_invite_mutual_friends_lists,omitempty"`
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) Reset() {
	*x = CPlayer_GetMutualFriendsForIncomingInvites_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetMutualFriendsForIncomingInvites_Response) ProtoMessage() {}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetMutualFriendsForIncomingInvites_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetMutualFriendsForIncomingInvites_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) GetIncomingInviteMutualFriendsLists() []*CPlayer_IncomingInviteMutualFriendList {
	if x != nil {
		return x.IncomingInviteMutualFriendsLists
	}
	return nil
}

type CPlayer_GetOwnedGames_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid                *uint64  `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	IncludeAppinfo         *bool    `protobuf:"varint,2,opt,name=include_appinfo,json=includeAppinfo" json:"include_appinfo,omitempty"`
	IncludePlayedFreeGames *bool    `protobuf:"varint,3,opt,name=include_played_free_games,json=includePlayedFreeGames" json:"include_played_free_games,omitempty"`
	AppidsFilter           []uint32 `protobuf:"varint,4,rep,name=appids_filter,json=appidsFilter" json:"appids_filter,omitempty"`
	IncludeFreeSub         *bool    `protobuf:"varint,5,opt,name=include_free_sub,json=includeFreeSub" json:"include_free_sub,omitempty"`
}

func (x *CPlayer_GetOwnedGames_Request) Reset() {
	*x = CPlayer_GetOwnedGames_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetOwnedGames_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetOwnedGames_Request) ProtoMessage() {}

func (x *CPlayer_GetOwnedGames_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetOwnedGames_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetOwnedGames_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CPlayer_GetOwnedGames_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Request) GetIncludeAppinfo() bool {
	if x != nil && x.IncludeAppinfo != nil {
		return *x.IncludeAppinfo
	}
	return false
}

func (x *CPlayer_GetOwnedGames_Request) GetIncludePlayedFreeGames() bool {
	if x != nil && x.IncludePlayedFreeGames != nil {
		return *x.IncludePlayedFreeGames
	}
	return false
}

func (x *CPlayer_GetOwnedGames_Request) GetAppidsFilter() []uint32 {
	if x != nil {
		return x.AppidsFilter
	}
	return nil
}

func (x *CPlayer_GetOwnedGames_Request) GetIncludeFreeSub() bool {
	if x != nil && x.IncludeFreeSub != nil {
		return *x.IncludeFreeSub
	}
	return false
}

type CPlayer_GetOwnedGames_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCount *uint32                                `protobuf:"varint,1,opt,name=game_count,json=gameCount" json:"game_count,omitempty"`
	Games     []*CPlayer_GetOwnedGames_Response_Game `protobuf:"bytes,2,rep,name=games" json:"games,omitempty"`
}

func (x *CPlayer_GetOwnedGames_Response) Reset() {
	*x = CPlayer_GetOwnedGames_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetOwnedGames_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetOwnedGames_Response) ProtoMessage() {}

func (x *CPlayer_GetOwnedGames_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetOwnedGames_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetOwnedGames_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CPlayer_GetOwnedGames_Response) GetGameCount() uint32 {
	if x != nil && x.GameCount != nil {
		return *x.GameCount
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Response) GetGames() []*CPlayer_GetOwnedGames_Response_Game {
	if x != nil {
		return x.Games
	}
	return nil
}

type CPlayer_GetPlayNext_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAgeSeconds *uint32  `protobuf:"varint,1,opt,name=max_age_seconds,json=maxAgeSeconds" json:"max_age_seconds,omitempty"`
	IgnoreAppids  []uint32 `protobuf:"varint,2,rep,name=ignore_appids,json=ignoreAppids" json:"ignore_appids,omitempty"`
}

func (x *CPlayer_GetPlayNext_Request) Reset() {
	*x = CPlayer_GetPlayNext_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetPlayNext_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPlayNext_Request) ProtoMessage() {}

func (x *CPlayer_GetPlayNext_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPlayNext_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPlayNext_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CPlayer_GetPlayNext_Request) GetMaxAgeSeconds() uint32 {
	if x != nil && x.MaxAgeSeconds != nil {
		return *x.MaxAgeSeconds
	}
	return 0
}

func (x *CPlayer_GetPlayNext_Request) GetIgnoreAppids() []uint32 {
	if x != nil {
		return x.IgnoreAppids
	}
	return nil
}

type CPlayer_GetPlayNext_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastUpdateTime *uint32  `protobuf:"varint,1,opt,name=last_update_time,json=lastUpdateTime" json:"last_update_time,omitempty"`
	Appids         []uint32 `protobuf:"varint,2,rep,name=appids" json:"appids,omitempty"`
}

func (x *CPlayer_GetPlayNext_Response) Reset() {
	*x = CPlayer_GetPlayNext_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetPlayNext_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPlayNext_Response) ProtoMessage() {}

func (x *CPlayer_GetPlayNext_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPlayNext_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPlayNext_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CPlayer_GetPlayNext_Response) GetLastUpdateTime() uint32 {
	if x != nil && x.LastUpdateTime != nil {
		return *x.LastUpdateTime
	}
	return 0
}

func (x *CPlayer_GetPlayNext_Response) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

type CPlayer_GetFriendsGameplayInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CPlayer_GetFriendsGameplayInfo_Request) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetFriendsGameplayInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Request) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CPlayer_GetFriendsGameplayInfo_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPlayer_GetFriendsGameplayInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YourInfo       *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo       `protobuf:"bytes,1,opt,name=your_info,json=yourInfo" json:"your_info,omitempty"`
	InGame         []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,2,rep,name=in_game,json=inGame" json:"in_game,omitempty"`
	PlayedRecently []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,3,rep,name=played_recently,json=playedRecently" json:"played_recently,omitempty"`
	PlayedEver     []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,4,rep,name=played_ever,json=playedEver" json:"played_ever,omitempty"`
	Owns           []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,5,rep,name=owns" json:"owns,omitempty"`
	InWishlist     []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,6,rep,name=in_wishlist,json=inWishlist" json:"in_wishlist,omitempty"`
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Response) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetYourInfo() *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo {
	if x != nil {
		return x.YourInfo
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetInGame() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.InGame
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetPlayedRecently() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.PlayedRecently
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetPlayedEver() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.PlayedEver
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetOwns() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.Owns
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetInWishlist() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.InWishlist
	}
	return nil
}

type CPlayer_GetFriendsAppsActivity_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsLanguage *string `protobuf:"bytes,1,opt,name=news_language,json=newsLanguage" json:"news_language,omitempty"`
	RequestFlags *uint32 `protobuf:"varint,2,opt,name=request_flags,json=requestFlags" json:"request_flags,omitempty"`
}

func (x *CPlayer_GetFriendsAppsActivity_Request) Reset() {
	*x = CPlayer_GetFriendsAppsActivity_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetFriendsAppsActivity_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsAppsActivity_Request) ProtoMessage() {}

func (x *CPlayer_GetFriendsAppsActivity_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsAppsActivity_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsAppsActivity_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CPlayer_GetFriendsAppsActivity_Request) GetNewsLanguage() string {
	if x != nil && x.NewsLanguage != nil {
		return *x.NewsLanguage
	}
	return ""
}

func (x *CPlayer_GetFriendsAppsActivity_Request) GetRequestFlags() uint32 {
	if x != nil && x.RequestFlags != nil {
		return *x.RequestFlags
	}
	return 0
}

type CPlayer_GetFriendsAppsActivity_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trending          []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,1,rep,name=trending" json:"trending,omitempty"`
	RecentPurchases   []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,2,rep,name=recent_purchases,json=recentPurchases" json:"recent_purchases,omitempty"`
	Unowned           []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,3,rep,name=unowned" json:"unowned,omitempty"`
	Popular           []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,4,rep,name=popular" json:"popular,omitempty"`
	DontForget        []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,5,rep,name=dont_forget,json=dontForget" json:"dont_forget,omitempty"`
	BeingDiscussed    []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,6,rep,name=being_discussed,json=beingDiscussed" json:"being_discussed,omitempty"`
	NewToGroup        []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,7,rep,name=new_to_group,json=newToGroup" json:"new_to_group,omitempty"`
	ReturnedToGroup   []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo `protobuf:"bytes,8,rep,name=returned_to_group,json=returnedToGroup" json:"returned_to_group,omitempty"`
	ActiveFriendCount *uint32                                                   `protobuf:"varint,9,opt,name=active_friend_count,json=activeFriendCount,def=0" json:"active_friend_count,omitempty"`
}

// Default values for CPlayer_GetFriendsAppsActivity_Response fields.
const (
	Default_CPlayer_GetFriendsAppsActivity_Response_ActiveFriendCount = uint32(0)
)

func (x *CPlayer_GetFriendsAppsActivity_Response) Reset() {
	*x = CPlayer_GetFriendsAppsActivity_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetFriendsAppsActivity_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsAppsActivity_Response) ProtoMessage() {}

func (x *CPlayer_GetFriendsAppsActivity_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsAppsActivity_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsAppsActivity_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetTrending() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.Trending
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetRecentPurchases() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.RecentPurchases
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetUnowned() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.Unowned
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetPopular() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.Popular
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetDontForget() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.DontForget
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetBeingDiscussed() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.BeingDiscussed
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetNewToGroup() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.NewToGroup
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetReturnedToGroup() []*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo {
	if x != nil {
		return x.ReturnedToGroup
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response) GetActiveFriendCount() uint32 {
	if x != nil && x.ActiveFriendCount != nil {
		return *x.ActiveFriendCount
	}
	return Default_CPlayer_GetFriendsAppsActivity_Response_ActiveFriendCount
}

type CPlayer_GetGameBadgeLevels_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CPlayer_GetGameBadgeLevels_Request) Reset() {
	*x = CPlayer_GetGameBadgeLevels_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetGameBadgeLevels_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetGameBadgeLevels_Request) ProtoMessage() {}

func (x *CPlayer_GetGameBadgeLevels_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetGameBadgeLevels_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetGameBadgeLevels_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CPlayer_GetGameBadgeLevels_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPlayer_GetGameBadgeLevels_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerLevel *uint32                                      `protobuf:"varint,1,opt,name=player_level,json=playerLevel" json:"player_level,omitempty"`
	Badges      []*CPlayer_GetGameBadgeLevels_Response_Badge `protobuf:"bytes,2,rep,name=badges" json:"badges,omitempty"`
}

func (x *CPlayer_GetGameBadgeLevels_Response) Reset() {
	*x = CPlayer_GetGameBadgeLevels_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetGameBadgeLevels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetGameBadgeLevels_Response) ProtoMessage() {}

func (x *CPlayer_GetGameBadgeLevels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetGameBadgeLevels_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetGameBadgeLevels_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CPlayer_GetGameBadgeLevels_Response) GetPlayerLevel() uint32 {
	if x != nil && x.PlayerLevel != nil {
		return *x.PlayerLevel
	}
	return 0
}

func (x *CPlayer_GetGameBadgeLevels_Response) GetBadges() []*CPlayer_GetGameBadgeLevels_Response_Badge {
	if x != nil {
		return x.Badges
	}
	return nil
}

type CPlayer_GetProfileBackground_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Language *string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (x *CPlayer_GetProfileBackground_Request) Reset() {
	*x = CPlayer_GetProfileBackground_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetProfileBackground_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileBackground_Request) ProtoMessage() {}

func (x *CPlayer_GetProfileBackground_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileBackground_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileBackground_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CPlayer_GetProfileBackground_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetProfileBackground_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type ProfileItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communityitemid *uint64 `protobuf:"varint,1,opt,name=communityitemid" json:"communityitemid,omitempty"`
	ImageSmall      *string `protobuf:"bytes,2,opt,name=image_small,json=imageSmall" json:"image_small,omitempty"`
	ImageLarge      *string `protobuf:"bytes,3,opt,name=image_large,json=imageLarge" json:"image_large,omitempty"`
	Name            *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	ItemTitle       *string `protobuf:"bytes,5,opt,name=item_title,json=itemTitle" json:"item_title,omitempty"`
	ItemDescription *string `protobuf:"bytes,6,opt,name=item_description,json=itemDescription" json:"item_description,omitempty"`
	Appid           *uint32 `protobuf:"varint,7,opt,name=appid" json:"appid,omitempty"`
	ItemType        *uint32 `protobuf:"varint,8,opt,name=item_type,json=itemType" json:"item_type,omitempty"`
	ItemClass       *uint32 `protobuf:"varint,9,opt,name=item_class,json=itemClass" json:"item_class,omitempty"`
	MovieWebm       *string `protobuf:"bytes,10,opt,name=movie_webm,json=movieWebm" json:"movie_webm,omitempty"`
	MovieMp4        *string `protobuf:"bytes,11,opt,name=movie_mp4,json=movieMp4" json:"movie_mp4,omitempty"`
	EquippedFlags   *uint32 `protobuf:"varint,12,opt,name=equipped_flags,json=equippedFlags" json:"equipped_flags,omitempty"`
}

func (x *ProfileItem) Reset() {
	*x = ProfileItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileItem) ProtoMessage() {}

func (x *ProfileItem) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileItem.ProtoReflect.Descriptor instead.
func (*ProfileItem) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *ProfileItem) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

func (x *ProfileItem) GetImageSmall() string {
	if x != nil && x.ImageSmall != nil {
		return *x.ImageSmall
	}
	return ""
}

func (x *ProfileItem) GetImageLarge() string {
	if x != nil && x.ImageLarge != nil {
		return *x.ImageLarge
	}
	return ""
}

func (x *ProfileItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProfileItem) GetItemTitle() string {
	if x != nil && x.ItemTitle != nil {
		return *x.ItemTitle
	}
	return ""
}

func (x *ProfileItem) GetItemDescription() string {
	if x != nil && x.ItemDescription != nil {
		return *x.ItemDescription
	}
	return ""
}

func (x *ProfileItem) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *ProfileItem) GetItemType() uint32 {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return 0
}

func (x *ProfileItem) GetItemClass() uint32 {
	if x != nil && x.ItemClass != nil {
		return *x.ItemClass
	}
	return 0
}

func (x *ProfileItem) GetMovieWebm() string {
	if x != nil && x.MovieWebm != nil {
		return *x.MovieWebm
	}
	return ""
}

func (x *ProfileItem) GetMovieMp4() string {
	if x != nil && x.MovieMp4 != nil {
		return *x.MovieMp4
	}
	return ""
}

func (x *ProfileItem) GetEquippedFlags() uint32 {
	if x != nil && x.EquippedFlags != nil {
		return *x.EquippedFlags
	}
	return 0
}

type CPlayer_GetProfileBackground_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileBackground *ProfileItem `protobuf:"bytes,1,opt,name=profile_background,json=profileBackground" json:"profile_background,omitempty"`
}

func (x *CPlayer_GetProfileBackground_Response) Reset() {
	*x = CPlayer_GetProfileBackground_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetProfileBackground_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileBackground_Response) ProtoMessage() {}

func (x *CPlayer_GetProfileBackground_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileBackground_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileBackground_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CPlayer_GetProfileBackground_Response) GetProfileBackground() *ProfileItem {
	if x != nil {
		return x.ProfileBackground
	}
	return nil
}

type CPlayer_SetProfileBackground_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communityitemid *uint64 `protobuf:"varint,1,opt,name=communityitemid" json:"communityitemid,omitempty"`
}

func (x *CPlayer_SetProfileBackground_Request) Reset() {
	*x = CPlayer_SetProfileBackground_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetProfileBackground_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetProfileBackground_Request) ProtoMessage() {}

func (x *CPlayer_SetProfileBackground_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetProfileBackground_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetProfileBackground_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CPlayer_SetProfileBackground_Request) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

type CPlayer_SetProfileBackground_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_SetProfileBackground_Response) Reset() {
	*x = CPlayer_SetProfileBackground_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetProfileBackground_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetProfileBackground_Response) ProtoMessage() {}

func (x *CPlayer_SetProfileBackground_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetProfileBackground_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetProfileBackground_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{17}
}

type CPlayer_GetMiniProfileBackground_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Language *string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (x *CPlayer_GetMiniProfileBackground_Request) Reset() {
	*x = CPlayer_GetMiniProfileBackground_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetMiniProfileBackground_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetMiniProfileBackground_Request) ProtoMessage() {}

func (x *CPlayer_GetMiniProfileBackground_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetMiniProfileBackground_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetMiniProfileBackground_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CPlayer_GetMiniProfileBackground_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetMiniProfileBackground_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CPlayer_GetMiniProfileBackground_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileBackground *ProfileItem `protobuf:"bytes,1,opt,name=profile_background,json=profileBackground" json:"profile_background,omitempty"`
}

func (x *CPlayer_GetMiniProfileBackground_Response) Reset() {
	*x = CPlayer_GetMiniProfileBackground_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetMiniProfileBackground_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetMiniProfileBackground_Response) ProtoMessage() {}

func (x *CPlayer_GetMiniProfileBackground_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetMiniProfileBackground_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetMiniProfileBackground_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CPlayer_GetMiniProfileBackground_Response) GetProfileBackground() *ProfileItem {
	if x != nil {
		return x.ProfileBackground
	}
	return nil
}

type CPlayer_SetMiniProfileBackground_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communityitemid *uint64 `protobuf:"varint,1,opt,name=communityitemid" json:"communityitemid,omitempty"`
}

func (x *CPlayer_SetMiniProfileBackground_Request) Reset() {
	*x = CPlayer_SetMiniProfileBackground_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetMiniProfileBackground_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetMiniProfileBackground_Request) ProtoMessage() {}

func (x *CPlayer_SetMiniProfileBackground_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetMiniProfileBackground_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetMiniProfileBackground_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CPlayer_SetMiniProfileBackground_Request) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

type CPlayer_SetMiniProfileBackground_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_SetMiniProfileBackground_Response) Reset() {
	*x = CPlayer_SetMiniProfileBackground_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetMiniProfileBackground_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetMiniProfileBackground_Response) ProtoMessage() {}

func (x *CPlayer_SetMiniProfileBackground_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetMiniProfileBackground_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetMiniProfileBackground_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{21}
}

type CPlayer_GetAvatarFrame_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Language *string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (x *CPlayer_GetAvatarFrame_Request) Reset() {
	*x = CPlayer_GetAvatarFrame_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetAvatarFrame_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAvatarFrame_Request) ProtoMessage() {}

func (x *CPlayer_GetAvatarFrame_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAvatarFrame_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAvatarFrame_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CPlayer_GetAvatarFrame_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetAvatarFrame_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CPlayer_GetAvatarFrame_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarFrame *ProfileItem `protobuf:"bytes,1,opt,name=avatar_frame,json=avatarFrame" json:"avatar_frame,omitempty"`
}

func (x *CPlayer_GetAvatarFrame_Response) Reset() {
	*x = CPlayer_GetAvatarFrame_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetAvatarFrame_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAvatarFrame_Response) ProtoMessage() {}

func (x *CPlayer_GetAvatarFrame_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAvatarFrame_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAvatarFrame_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CPlayer_GetAvatarFrame_Response) GetAvatarFrame() *ProfileItem {
	if x != nil {
		return x.AvatarFrame
	}
	return nil
}

type CPlayer_SetAvatarFrame_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communityitemid *uint64 `protobuf:"varint,1,opt,name=communityitemid" json:"communityitemid,omitempty"`
}

func (x *CPlayer_SetAvatarFrame_Request) Reset() {
	*x = CPlayer_SetAvatarFrame_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetAvatarFrame_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetAvatarFrame_Request) ProtoMessage() {}

func (x *CPlayer_SetAvatarFrame_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetAvatarFrame_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetAvatarFrame_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CPlayer_SetAvatarFrame_Request) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

type CPlayer_SetAvatarFrame_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_SetAvatarFrame_Response) Reset() {
	*x = CPlayer_SetAvatarFrame_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetAvatarFrame_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetAvatarFrame_Response) ProtoMessage() {}

func (x *CPlayer_SetAvatarFrame_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetAvatarFrame_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetAvatarFrame_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{25}
}

type CPlayer_GetAnimatedAvatar_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Language *string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (x *CPlayer_GetAnimatedAvatar_Request) Reset() {
	*x = CPlayer_GetAnimatedAvatar_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetAnimatedAvatar_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAnimatedAvatar_Request) ProtoMessage() {}

func (x *CPlayer_GetAnimatedAvatar_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAnimatedAvatar_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAnimatedAvatar_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CPlayer_GetAnimatedAvatar_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetAnimatedAvatar_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CPlayer_GetAnimatedAvatar_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar *ProfileItem `protobuf:"bytes,1,opt,name=avatar" json:"avatar,omitempty"`
}

func (x *CPlayer_GetAnimatedAvatar_Response) Reset() {
	*x = CPlayer_GetAnimatedAvatar_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetAnimatedAvatar_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAnimatedAvatar_Response) ProtoMessage() {}

func (x *CPlayer_GetAnimatedAvatar_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAnimatedAvatar_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAnimatedAvatar_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{27}
}

func (x *CPlayer_GetAnimatedAvatar_Response) GetAvatar() *ProfileItem {
	if x != nil {
		return x.Avatar
	}
	return nil
}

type CPlayer_SetAnimatedAvatar_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communityitemid *uint64 `protobuf:"varint,1,opt,name=communityitemid" json:"communityitemid,omitempty"`
}

func (x *CPlayer_SetAnimatedAvatar_Request) Reset() {
	*x = CPlayer_SetAnimatedAvatar_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetAnimatedAvatar_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetAnimatedAvatar_Request) ProtoMessage() {}

func (x *CPlayer_SetAnimatedAvatar_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetAnimatedAvatar_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetAnimatedAvatar_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{28}
}

func (x *CPlayer_SetAnimatedAvatar_Request) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

type CPlayer_SetAnimatedAvatar_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_SetAnimatedAvatar_Response) Reset() {
	*x = CPlayer_SetAnimatedAvatar_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetAnimatedAvatar_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetAnimatedAvatar_Response) ProtoMessage() {}

func (x *CPlayer_SetAnimatedAvatar_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetAnimatedAvatar_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetAnimatedAvatar_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{29}
}

type CPlayer_GetProfileItemsOwned_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language *string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
}

func (x *CPlayer_GetProfileItemsOwned_Request) Reset() {
	*x = CPlayer_GetProfileItemsOwned_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetProfileItemsOwned_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileItemsOwned_Request) ProtoMessage() {}

func (x *CPlayer_GetProfileItemsOwned_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileItemsOwned_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileItemsOwned_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{30}
}

func (x *CPlayer_GetProfileItemsOwned_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CPlayer_GetProfileItemsOwned_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileBackgrounds     []*ProfileItem `protobuf:"bytes,1,rep,name=profile_backgrounds,json=profileBackgrounds" json:"profile_backgrounds,omitempty"`
	MiniProfileBackgrounds []*ProfileItem `protobuf:"bytes,2,rep,name=mini_profile_backgrounds,json=miniProfileBackgrounds" json:"mini_profile_backgrounds,omitempty"`
	AvatarFrames           []*ProfileItem `protobuf:"bytes,3,rep,name=avatar_frames,json=avatarFrames" json:"avatar_frames,omitempty"`
	AnimatedAvatars        []*ProfileItem `protobuf:"bytes,4,rep,name=animated_avatars,json=animatedAvatars" json:"animated_avatars,omitempty"`
	ProfileModifiers       []*ProfileItem `protobuf:"bytes,5,rep,name=profile_modifiers,json=profileModifiers" json:"profile_modifiers,omitempty"`
}

func (x *CPlayer_GetProfileItemsOwned_Response) Reset() {
	*x = CPlayer_GetProfileItemsOwned_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetProfileItemsOwned_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileItemsOwned_Response) ProtoMessage() {}

func (x *CPlayer_GetProfileItemsOwned_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileItemsOwned_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileItemsOwned_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{31}
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetProfileBackgrounds() []*ProfileItem {
	if x != nil {
		return x.ProfileBackgrounds
	}
	return nil
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetMiniProfileBackgrounds() []*ProfileItem {
	if x != nil {
		return x.MiniProfileBackgrounds
	}
	return nil
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetAvatarFrames() []*ProfileItem {
	if x != nil {
		return x.AvatarFrames
	}
	return nil
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetAnimatedAvatars() []*ProfileItem {
	if x != nil {
		return x.AnimatedAvatars
	}
	return nil
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetProfileModifiers() []*ProfileItem {
	if x != nil {
		return x.ProfileModifiers
	}
	return nil
}

type CPlayer_GetProfileItemsEquipped_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Language *string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (x *CPlayer_GetProfileItemsEquipped_Request) Reset() {
	*x = CPlayer_GetProfileItemsEquipped_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetProfileItemsEquipped_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileItemsEquipped_Request) ProtoMessage() {}

func (x *CPlayer_GetProfileItemsEquipped_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileItemsEquipped_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileItemsEquipped_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{32}
}

func (x *CPlayer_GetProfileItemsEquipped_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetProfileItemsEquipped_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CPlayer_GetProfileItemsEquipped_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileBackground     *ProfileItem `protobuf:"bytes,1,opt,name=profile_background,json=profileBackground" json:"profile_background,omitempty"`
	MiniProfileBackground *ProfileItem `protobuf:"bytes,2,opt,name=mini_profile_background,json=miniProfileBackground" json:"mini_profile_background,omitempty"`
	AvatarFrame           *ProfileItem `protobuf:"bytes,3,opt,name=avatar_frame,json=avatarFrame" json:"avatar_frame,omitempty"`
	AnimatedAvatar        *ProfileItem `protobuf:"bytes,4,opt,name=animated_avatar,json=animatedAvatar" json:"animated_avatar,omitempty"`
	ProfileModifier       *ProfileItem `protobuf:"bytes,5,opt,name=profile_modifier,json=profileModifier" json:"profile_modifier,omitempty"`
}

func (x *CPlayer_GetProfileItemsEquipped_Response) Reset() {
	*x = CPlayer_GetProfileItemsEquipped_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetProfileItemsEquipped_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileItemsEquipped_Response) ProtoMessage() {}

func (x *CPlayer_GetProfileItemsEquipped_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileItemsEquipped_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileItemsEquipped_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{33}
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetProfileBackground() *ProfileItem {
	if x != nil {
		return x.ProfileBackground
	}
	return nil
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetMiniProfileBackground() *ProfileItem {
	if x != nil {
		return x.MiniProfileBackground
	}
	return nil
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetAvatarFrame() *ProfileItem {
	if x != nil {
		return x.AvatarFrame
	}
	return nil
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetAnimatedAvatar() *ProfileItem {
	if x != nil {
		return x.AnimatedAvatar
	}
	return nil
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetProfileModifier() *ProfileItem {
	if x != nil {
		return x.ProfileModifier
	}
	return nil
}

type CPlayer_SetEquippedProfileItemFlags_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communityitemid *uint64 `protobuf:"varint,1,opt,name=communityitemid" json:"communityitemid,omitempty"`
	Flags           *uint32 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
}

func (x *CPlayer_SetEquippedProfileItemFlags_Request) Reset() {
	*x = CPlayer_SetEquippedProfileItemFlags_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetEquippedProfileItemFlags_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetEquippedProfileItemFlags_Request) ProtoMessage() {}

func (x *CPlayer_SetEquippedProfileItemFlags_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetEquippedProfileItemFlags_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetEquippedProfileItemFlags_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{34}
}

func (x *CPlayer_SetEquippedProfileItemFlags_Request) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

func (x *CPlayer_SetEquippedProfileItemFlags_Request) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type CPlayer_SetEquippedProfileItemFlags_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_SetEquippedProfileItemFlags_Response) Reset() {
	*x = CPlayer_SetEquippedProfileItemFlags_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetEquippedProfileItemFlags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetEquippedProfileItemFlags_Response) ProtoMessage() {}

func (x *CPlayer_SetEquippedProfileItemFlags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetEquippedProfileItemFlags_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetEquippedProfileItemFlags_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{35}
}

type CPlayer_GetEmoticonList_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_GetEmoticonList_Request) Reset() {
	*x = CPlayer_GetEmoticonList_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetEmoticonList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetEmoticonList_Request) ProtoMessage() {}

func (x *CPlayer_GetEmoticonList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetEmoticonList_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetEmoticonList_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{36}
}

type CPlayer_GetEmoticonList_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emoticons []*CPlayer_GetEmoticonList_Response_Emoticon `protobuf:"bytes,1,rep,name=emoticons" json:"emoticons,omitempty"`
}

func (x *CPlayer_GetEmoticonList_Response) Reset() {
	*x = CPlayer_GetEmoticonList_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetEmoticonList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetEmoticonList_Response) ProtoMessage() {}

func (x *CPlayer_GetEmoticonList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetEmoticonList_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetEmoticonList_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{37}
}

func (x *CPlayer_GetEmoticonList_Response) GetEmoticons() []*CPlayer_GetEmoticonList_Response_Emoticon {
	if x != nil {
		return x.Emoticons
	}
	return nil
}

type CPlayer_GetAchievementsProgress_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64  `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	Language *string  `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
	Appids   []uint32 `protobuf:"varint,3,rep,name=appids" json:"appids,omitempty"`
}

func (x *CPlayer_GetAchievementsProgress_Request) Reset() {
	*x = CPlayer_GetAchievementsProgress_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetAchievementsProgress_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAchievementsProgress_Request) ProtoMessage() {}

func (x *CPlayer_GetAchievementsProgress_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAchievementsProgress_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAchievementsProgress_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{38}
}

func (x *CPlayer_GetAchievementsProgress_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetAchievementsProgress_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CPlayer_GetAchievementsProgress_Request) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

type CPlayer_GetAchievementsProgress_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementProgress []*CPlayer_GetAchievementsProgress_Response_AchievementProgress `protobuf:"bytes,1,rep,name=achievement_progress,json=achievementProgress" json:"achievement_progress,omitempty"`
}

func (x *CPlayer_GetAchievementsProgress_Response) Reset() {
	*x = CPlayer_GetAchievementsProgress_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetAchievementsProgress_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAchievementsProgress_Response) ProtoMessage() {}

func (x *CPlayer_GetAchievementsProgress_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAchievementsProgress_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAchievementsProgress_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{39}
}

func (x *CPlayer_GetAchievementsProgress_Response) GetAchievementProgress() []*CPlayer_GetAchievementsProgress_Response_AchievementProgress {
	if x != nil {
		return x.AchievementProgress
	}
	return nil
}

type CPlayer_PostStatusToFriends_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	StatusText *string `protobuf:"bytes,2,opt,name=status_text,json=statusText" json:"status_text,omitempty"`
}

func (x *CPlayer_PostStatusToFriends_Request) Reset() {
	*x = CPlayer_PostStatusToFriends_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_PostStatusToFriends_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_PostStatusToFriends_Request) ProtoMessage() {}

func (x *CPlayer_PostStatusToFriends_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_PostStatusToFriends_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_PostStatusToFriends_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{40}
}

func (x *CPlayer_PostStatusToFriends_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPlayer_PostStatusToFriends_Request) GetStatusText() string {
	if x != nil && x.StatusText != nil {
		return *x.StatusText
	}
	return ""
}

type CPlayer_PostStatusToFriends_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_PostStatusToFriends_Response) Reset() {
	*x = CPlayer_PostStatusToFriends_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_PostStatusToFriends_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_PostStatusToFriends_Response) ProtoMessage() {}

func (x *CPlayer_PostStatusToFriends_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_PostStatusToFriends_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_PostStatusToFriends_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{41}
}

type CPlayer_GetPostedStatus_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	Postid  *uint64 `protobuf:"varint,2,opt,name=postid" json:"postid,omitempty"`
}

func (x *CPlayer_GetPostedStatus_Request) Reset() {
	*x = CPlayer_GetPostedStatus_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetPostedStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPostedStatus_Request) ProtoMessage() {}

func (x *CPlayer_GetPostedStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPostedStatus_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPostedStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{42}
}

func (x *CPlayer_GetPostedStatus_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetPostedStatus_Request) GetPostid() uint64 {
	if x != nil && x.Postid != nil {
		return *x.Postid
	}
	return 0
}

type CPlayer_GetPostedStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid  *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Postid     *uint64 `protobuf:"varint,2,opt,name=postid" json:"postid,omitempty"`
	StatusText *string `protobuf:"bytes,3,opt,name=status_text,json=statusText" json:"status_text,omitempty"`
	Deleted    *bool   `protobuf:"varint,4,opt,name=deleted" json:"deleted,omitempty"`
	Appid      *uint32 `protobuf:"varint,5,opt,name=appid" json:"appid,omitempty"`
}

func (x *CPlayer_GetPostedStatus_Response) Reset() {
	*x = CPlayer_GetPostedStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetPostedStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPostedStatus_Response) ProtoMessage() {}

func (x *CPlayer_GetPostedStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPostedStatus_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPostedStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{43}
}

func (x *CPlayer_GetPostedStatus_Response) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPlayer_GetPostedStatus_Response) GetPostid() uint64 {
	if x != nil && x.Postid != nil {
		return *x.Postid
	}
	return 0
}

func (x *CPlayer_GetPostedStatus_Response) GetStatusText() string {
	if x != nil && x.StatusText != nil {
		return *x.StatusText
	}
	return ""
}

func (x *CPlayer_GetPostedStatus_Response) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *CPlayer_GetPostedStatus_Response) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPlayer_DeletePostedStatus_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Postid *uint64 `protobuf:"varint,1,opt,name=postid" json:"postid,omitempty"`
}

func (x *CPlayer_DeletePostedStatus_Request) Reset() {
	*x = CPlayer_DeletePostedStatus_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_DeletePostedStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_DeletePostedStatus_Request) ProtoMessage() {}

func (x *CPlayer_DeletePostedStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_DeletePostedStatus_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_DeletePostedStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{44}
}

func (x *CPlayer_DeletePostedStatus_Request) GetPostid() uint64 {
	if x != nil && x.Postid != nil {
		return *x.Postid
	}
	return 0
}

type CPlayer_DeletePostedStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_DeletePostedStatus_Response) Reset() {
	*x = CPlayer_DeletePostedStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_DeletePostedStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_DeletePostedStatus_Response) ProtoMessage() {}

func (x *CPlayer_DeletePostedStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_DeletePostedStatus_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_DeletePostedStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{45}
}

type CPlayer_GetLastPlayedTimes_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinLastPlayed *uint32 `protobuf:"varint,1,opt,name=min_last_played,json=minLastPlayed" json:"min_last_played,omitempty"`
}

func (x *CPlayer_GetLastPlayedTimes_Request) Reset() {
	*x = CPlayer_GetLastPlayedTimes_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetLastPlayedTimes_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetLastPlayedTimes_Request) ProtoMessage() {}

func (x *CPlayer_GetLastPlayedTimes_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetLastPlayedTimes_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetLastPlayedTimes_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{46}
}

func (x *CPlayer_GetLastPlayedTimes_Request) GetMinLastPlayed() uint32 {
	if x != nil && x.MinLastPlayed != nil {
		return *x.MinLastPlayed
	}
	return 0
}

type CPlayer_GetLastPlayedTimes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []*CPlayer_GetLastPlayedTimes_Response_Game `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
}

func (x *CPlayer_GetLastPlayedTimes_Response) Reset() {
	*x = CPlayer_GetLastPlayedTimes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetLastPlayedTimes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetLastPlayedTimes_Response) ProtoMessage() {}

func (x *CPlayer_GetLastPlayedTimes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetLastPlayedTimes_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetLastPlayedTimes_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{47}
}

func (x *CPlayer_GetLastPlayedTimes_Response) GetGames() []*CPlayer_GetLastPlayedTimes_Response_Game {
	if x != nil {
		return x.Games
	}
	return nil
}

type CPlayer_AcceptSSA_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_AcceptSSA_Request) Reset() {
	*x = CPlayer_AcceptSSA_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_AcceptSSA_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AcceptSSA_Request) ProtoMessage() {}

func (x *CPlayer_AcceptSSA_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AcceptSSA_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_AcceptSSA_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{48}
}

type CPlayer_AcceptSSA_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_AcceptSSA_Response) Reset() {
	*x = CPlayer_AcceptSSA_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_AcceptSSA_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AcceptSSA_Response) ProtoMessage() {}

func (x *CPlayer_AcceptSSA_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AcceptSSA_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_AcceptSSA_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{49}
}

type CPlayer_GetNicknameList_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_GetNicknameList_Request) Reset() {
	*x = CPlayer_GetNicknameList_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetNicknameList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNicknameList_Request) ProtoMessage() {}

func (x *CPlayer_GetNicknameList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNicknameList_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNicknameList_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{50}
}

type CPlayer_GetNicknameList_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nicknames []*CPlayer_GetNicknameList_Response_PlayerNickname `protobuf:"bytes,1,rep,name=nicknames" json:"nicknames,omitempty"`
}

func (x *CPlayer_GetNicknameList_Response) Reset() {
	*x = CPlayer_GetNicknameList_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetNicknameList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNicknameList_Response) ProtoMessage() {}

func (x *CPlayer_GetNicknameList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNicknameList_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNicknameList_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{51}
}

func (x *CPlayer_GetNicknameList_Response) GetNicknames() []*CPlayer_GetNicknameList_Response_PlayerNickname {
	if x != nil {
		return x.Nicknames
	}
	return nil
}

type CPlayer_GetPerFriendPreferences_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_GetPerFriendPreferences_Request) Reset() {
	*x = CPlayer_GetPerFriendPreferences_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetPerFriendPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPerFriendPreferences_Request) ProtoMessage() {}

func (x *CPlayer_GetPerFriendPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPerFriendPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPerFriendPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{52}
}

type PerFriendPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid                 *uint32               `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
	Nickname                  *string               `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	NotificationsShowingame   *ENotificationSetting `protobuf:"varint,3,opt,name=notifications_showingame,json=notificationsShowingame,enum=ENotificationSetting,def=0" json:"notifications_showingame,omitempty"`
	NotificationsShowonline   *ENotificationSetting `protobuf:"varint,4,opt,name=notifications_showonline,json=notificationsShowonline,enum=ENotificationSetting,def=0" json:"notifications_showonline,omitempty"`
	NotificationsShowmessages *ENotificationSetting `protobuf:"varint,5,opt,name=notifications_showmessages,json=notificationsShowmessages,enum=ENotificationSetting,def=0" json:"notifications_showmessages,omitempty"`
	SoundsShowingame          *ENotificationSetting `protobuf:"varint,6,opt,name=sounds_showingame,json=soundsShowingame,enum=ENotificationSetting,def=0" json:"sounds_showingame,omitempty"`
	SoundsShowonline          *ENotificationSetting `protobuf:"varint,7,opt,name=sounds_showonline,json=soundsShowonline,enum=ENotificationSetting,def=0" json:"sounds_showonline,omitempty"`
	SoundsShowmessages        *ENotificationSetting `protobuf:"varint,8,opt,name=sounds_showmessages,json=soundsShowmessages,enum=ENotificationSetting,def=0" json:"sounds_showmessages,omitempty"`
	NotificationsSendmobile   *ENotificationSetting `protobuf:"varint,9,opt,name=notifications_sendmobile,json=notificationsSendmobile,enum=ENotificationSetting,def=0" json:"notifications_sendmobile,omitempty"`
}

// Default values for PerFriendPreferences fields.
const (
	Default_PerFriendPreferences_NotificationsShowingame   = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_NotificationsShowonline   = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_NotificationsShowmessages = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_SoundsShowingame          = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_SoundsShowonline          = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_SoundsShowmessages        = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_NotificationsSendmobile   = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
)

func (x *PerFriendPreferences) Reset() {
	*x = PerFriendPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerFriendPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerFriendPreferences) ProtoMessage() {}

func (x *PerFriendPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerFriendPreferences.ProtoReflect.Descriptor instead.
func (*PerFriendPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{53}
}

func (x *PerFriendPreferences) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *PerFriendPreferences) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *PerFriendPreferences) GetNotificationsShowingame() ENotificationSetting {
	if x != nil && x.NotificationsShowingame != nil {
		return *x.NotificationsShowingame
	}
	return Default_PerFriendPreferences_NotificationsShowingame
}

func (x *PerFriendPreferences) GetNotificationsShowonline() ENotificationSetting {
	if x != nil && x.NotificationsShowonline != nil {
		return *x.NotificationsShowonline
	}
	return Default_PerFriendPreferences_NotificationsShowonline
}

func (x *PerFriendPreferences) GetNotificationsShowmessages() ENotificationSetting {
	if x != nil && x.NotificationsShowmessages != nil {
		return *x.NotificationsShowmessages
	}
	return Default_PerFriendPreferences_NotificationsShowmessages
}

func (x *PerFriendPreferences) GetSoundsShowingame() ENotificationSetting {
	if x != nil && x.SoundsShowingame != nil {
		return *x.SoundsShowingame
	}
	return Default_PerFriendPreferences_SoundsShowingame
}

func (x *PerFriendPreferences) GetSoundsShowonline() ENotificationSetting {
	if x != nil && x.SoundsShowonline != nil {
		return *x.SoundsShowonline
	}
	return Default_PerFriendPreferences_SoundsShowonline
}

func (x *PerFriendPreferences) GetSoundsShowmessages() ENotificationSetting {
	if x != nil && x.SoundsShowmessages != nil {
		return *x.SoundsShowmessages
	}
	return Default_PerFriendPreferences_SoundsShowmessages
}

func (x *PerFriendPreferences) GetNotificationsSendmobile() ENotificationSetting {
	if x != nil && x.NotificationsSendmobile != nil {
		return *x.NotificationsSendmobile
	}
	return Default_PerFriendPreferences_NotificationsSendmobile
}

type CPlayer_GetPerFriendPreferences_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences []*PerFriendPreferences `protobuf:"bytes,1,rep,name=preferences" json:"preferences,omitempty"`
}

func (x *CPlayer_GetPerFriendPreferences_Response) Reset() {
	*x = CPlayer_GetPerFriendPreferences_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetPerFriendPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPerFriendPreferences_Response) ProtoMessage() {}

func (x *CPlayer_GetPerFriendPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPerFriendPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPerFriendPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{54}
}

func (x *CPlayer_GetPerFriendPreferences_Response) GetPreferences() []*PerFriendPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetPerFriendPreferences_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences *PerFriendPreferences `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
}

func (x *CPlayer_SetPerFriendPreferences_Request) Reset() {
	*x = CPlayer_SetPerFriendPreferences_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetPerFriendPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetPerFriendPreferences_Request) ProtoMessage() {}

func (x *CPlayer_SetPerFriendPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetPerFriendPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetPerFriendPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{55}
}

func (x *CPlayer_SetPerFriendPreferences_Request) GetPreferences() *PerFriendPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetPerFriendPreferences_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_SetPerFriendPreferences_Response) Reset() {
	*x = CPlayer_SetPerFriendPreferences_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetPerFriendPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetPerFriendPreferences_Response) ProtoMessage() {}

func (x *CPlayer_SetPerFriendPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetPerFriendPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetPerFriendPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{56}
}

type CPlayer_AddFriend_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CPlayer_AddFriend_Request) Reset() {
	*x = CPlayer_AddFriend_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_AddFriend_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AddFriend_Request) ProtoMessage() {}

func (x *CPlayer_AddFriend_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AddFriend_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_AddFriend_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{57}
}

func (x *CPlayer_AddFriend_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CPlayer_AddFriend_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteSent         *bool   `protobuf:"varint,1,opt,name=invite_sent,json=inviteSent" json:"invite_sent,omitempty"`
	FriendRelationship *uint32 `protobuf:"varint,2,opt,name=friend_relationship,json=friendRelationship" json:"friend_relationship,omitempty"`
	Result             *int32  `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
}

func (x *CPlayer_AddFriend_Response) Reset() {
	*x = CPlayer_AddFriend_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_AddFriend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AddFriend_Response) ProtoMessage() {}

func (x *CPlayer_AddFriend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AddFriend_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_AddFriend_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{58}
}

func (x *CPlayer_AddFriend_Response) GetInviteSent() bool {
	if x != nil && x.InviteSent != nil {
		return *x.InviteSent
	}
	return false
}

func (x *CPlayer_AddFriend_Response) GetFriendRelationship() uint32 {
	if x != nil && x.FriendRelationship != nil {
		return *x.FriendRelationship
	}
	return 0
}

func (x *CPlayer_AddFriend_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CPlayer_RemoveFriend_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CPlayer_RemoveFriend_Request) Reset() {
	*x = CPlayer_RemoveFriend_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_RemoveFriend_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_RemoveFriend_Request) ProtoMessage() {}

func (x *CPlayer_RemoveFriend_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_RemoveFriend_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_RemoveFriend_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{59}
}

func (x *CPlayer_RemoveFriend_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CPlayer_RemoveFriend_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendRelationship *uint32 `protobuf:"varint,1,opt,name=friend_relationship,json=friendRelationship" json:"friend_relationship,omitempty"`
}

func (x *CPlayer_RemoveFriend_Response) Reset() {
	*x = CPlayer_RemoveFriend_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_RemoveFriend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_RemoveFriend_Response) ProtoMessage() {}

func (x *CPlayer_RemoveFriend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_RemoveFriend_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_RemoveFriend_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{60}
}

func (x *CPlayer_RemoveFriend_Response) GetFriendRelationship() uint32 {
	if x != nil && x.FriendRelationship != nil {
		return *x.FriendRelationship
	}
	return 0
}

type CPlayer_IgnoreFriend_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Unignore *bool   `protobuf:"varint,2,opt,name=unignore" json:"unignore,omitempty"`
}

func (x *CPlayer_IgnoreFriend_Request) Reset() {
	*x = CPlayer_IgnoreFriend_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_IgnoreFriend_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_IgnoreFriend_Request) ProtoMessage() {}

func (x *CPlayer_IgnoreFriend_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_IgnoreFriend_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_IgnoreFriend_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{61}
}

func (x *CPlayer_IgnoreFriend_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_IgnoreFriend_Request) GetUnignore() bool {
	if x != nil && x.Unignore != nil {
		return *x.Unignore
	}
	return false
}

type CPlayer_IgnoreFriend_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendRelationship *uint32 `protobuf:"varint,1,opt,name=friend_relationship,json=friendRelationship" json:"friend_relationship,omitempty"`
}

func (x *CPlayer_IgnoreFriend_Response) Reset() {
	*x = CPlayer_IgnoreFriend_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_IgnoreFriend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_IgnoreFriend_Response) ProtoMessage() {}

func (x *CPlayer_IgnoreFriend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_IgnoreFriend_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_IgnoreFriend_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{62}
}

func (x *CPlayer_IgnoreFriend_Response) GetFriendRelationship() uint32 {
	if x != nil && x.FriendRelationship != nil {
		return *x.FriendRelationship
	}
	return 0
}

type CPlayer_GetCommunityPreferences_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_GetCommunityPreferences_Request) Reset() {
	*x = CPlayer_GetCommunityPreferences_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetCommunityPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetCommunityPreferences_Request) ProtoMessage() {}

func (x *CPlayer_GetCommunityPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetCommunityPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetCommunityPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{63}
}

type CPlayer_CommunityPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HideAdultContentViolence *bool   `protobuf:"varint,1,opt,name=hide_adult_content_violence,json=hideAdultContentViolence,def=1" json:"hide_adult_content_violence,omitempty"`
	HideAdultContentSex      *bool   `protobuf:"varint,2,opt,name=hide_adult_content_sex,json=hideAdultContentSex,def=1" json:"hide_adult_content_sex,omitempty"`
	ParenthesizeNicknames    *bool   `protobuf:"varint,4,opt,name=parenthesize_nicknames,json=parenthesizeNicknames,def=0" json:"parenthesize_nicknames,omitempty"`
	TimestampUpdated         *uint32 `protobuf:"varint,3,opt,name=timestamp_updated,json=timestampUpdated" json:"timestamp_updated,omitempty"`
}

// Default values for CPlayer_CommunityPreferences fields.
const (
	Default_CPlayer_CommunityPreferences_HideAdultContentViolence = bool(true)
	Default_CPlayer_CommunityPreferences_HideAdultContentSex      = bool(true)
	Default_CPlayer_CommunityPreferences_ParenthesizeNicknames    = bool(false)
)

func (x *CPlayer_CommunityPreferences) Reset() {
	*x = CPlayer_CommunityPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_CommunityPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_CommunityPreferences) ProtoMessage() {}

func (x *CPlayer_CommunityPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_CommunityPreferences.ProtoReflect.Descriptor instead.
func (*CPlayer_CommunityPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{64}
}

func (x *CPlayer_CommunityPreferences) GetHideAdultContentViolence() bool {
	if x != nil && x.HideAdultContentViolence != nil {
		return *x.HideAdultContentViolence
	}
	return Default_CPlayer_CommunityPreferences_HideAdultContentViolence
}

func (x *CPlayer_CommunityPreferences) GetHideAdultContentSex() bool {
	if x != nil && x.HideAdultContentSex != nil {
		return *x.HideAdultContentSex
	}
	return Default_CPlayer_CommunityPreferences_HideAdultContentSex
}

func (x *CPlayer_CommunityPreferences) GetParenthesizeNicknames() bool {
	if x != nil && x.ParenthesizeNicknames != nil {
		return *x.ParenthesizeNicknames
	}
	return Default_CPlayer_CommunityPreferences_ParenthesizeNicknames
}

func (x *CPlayer_CommunityPreferences) GetTimestampUpdated() uint32 {
	if x != nil && x.TimestampUpdated != nil {
		return *x.TimestampUpdated
	}
	return 0
}

type CPlayer_GetCommunityPreferences_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences *CPlayer_CommunityPreferences `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
}

func (x *CPlayer_GetCommunityPreferences_Response) Reset() {
	*x = CPlayer_GetCommunityPreferences_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetCommunityPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetCommunityPreferences_Response) ProtoMessage() {}

func (x *CPlayer_GetCommunityPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetCommunityPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetCommunityPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{65}
}

func (x *CPlayer_GetCommunityPreferences_Response) GetPreferences() *CPlayer_CommunityPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetCommunityPreferences_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences *CPlayer_CommunityPreferences `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
}

func (x *CPlayer_SetCommunityPreferences_Request) Reset() {
	*x = CPlayer_SetCommunityPreferences_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetCommunityPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetCommunityPreferences_Request) ProtoMessage() {}

func (x *CPlayer_SetCommunityPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetCommunityPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetCommunityPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{66}
}

func (x *CPlayer_SetCommunityPreferences_Request) GetPreferences() *CPlayer_CommunityPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetCommunityPreferences_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_SetCommunityPreferences_Response) Reset() {
	*x = CPlayer_SetCommunityPreferences_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetCommunityPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetCommunityPreferences_Response) ProtoMessage() {}

func (x *CPlayer_SetCommunityPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetCommunityPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetCommunityPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{67}
}

type CPlayer_GetNewSteamAnnouncementState_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language *int32 `protobuf:"varint,1,opt,name=language" json:"language,omitempty"`
}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) Reset() {
	*x = CPlayer_GetNewSteamAnnouncementState_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNewSteamAnnouncementState_Request) ProtoMessage() {}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNewSteamAnnouncementState_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNewSteamAnnouncementState_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{68}
}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CPlayer_GetNewSteamAnnouncementState_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                *int32  `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
	AnnouncementHeadline *string `protobuf:"bytes,2,opt,name=announcement_headline,json=announcementHeadline" json:"announcement_headline,omitempty"`
	AnnouncementUrl      *string `protobuf:"bytes,3,opt,name=announcement_url,json=announcementUrl" json:"announcement_url,omitempty"`
	TimePosted           *uint32 `protobuf:"varint,4,opt,name=time_posted,json=timePosted" json:"time_posted,omitempty"`
	AnnouncementGid      *uint64 `protobuf:"varint,5,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) Reset() {
	*x = CPlayer_GetNewSteamAnnouncementState_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNewSteamAnnouncementState_Response) ProtoMessage() {}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNewSteamAnnouncementState_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNewSteamAnnouncementState_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{69}
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetAnnouncementHeadline() string {
	if x != nil && x.AnnouncementHeadline != nil {
		return *x.AnnouncementHeadline
	}
	return ""
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetAnnouncementUrl() string {
	if x != nil && x.AnnouncementUrl != nil {
		return *x.AnnouncementUrl
	}
	return ""
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetTimePosted() uint32 {
	if x != nil && x.TimePosted != nil {
		return *x.TimePosted
	}
	return 0
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

type CPlayer_UpdateSteamAnnouncementLastRead_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnouncementGid *uint64 `protobuf:"varint,1,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
	TimePosted      *uint32 `protobuf:"varint,2,opt,name=time_posted,json=timePosted" json:"time_posted,omitempty"`
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) Reset() {
	*x = CPlayer_UpdateSteamAnnouncementLastRead_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_UpdateSteamAnnouncementLastRead_Request) ProtoMessage() {}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_UpdateSteamAnnouncementLastRead_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_UpdateSteamAnnouncementLastRead_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{70}
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) GetTimePosted() uint32 {
	if x != nil && x.TimePosted != nil {
		return *x.TimePosted
	}
	return 0
}

type CPlayer_UpdateSteamAnnouncementLastRead_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Response) Reset() {
	*x = CPlayer_UpdateSteamAnnouncementLastRead_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_UpdateSteamAnnouncementLastRead_Response) ProtoMessage() {}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_UpdateSteamAnnouncementLastRead_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_UpdateSteamAnnouncementLastRead_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{71}
}

type CPlayer_GetPrivacySettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_GetPrivacySettings_Request) Reset() {
	*x = CPlayer_GetPrivacySettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetPrivacySettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPrivacySettings_Request) ProtoMessage() {}

func (x *CPlayer_GetPrivacySettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPrivacySettings_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPrivacySettings_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{72}
}

type CPrivacySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivacyState            *int32 `protobuf:"varint,1,opt,name=privacy_state,json=privacyState" json:"privacy_state,omitempty"`
	PrivacyStateInventory   *int32 `protobuf:"varint,2,opt,name=privacy_state_inventory,json=privacyStateInventory" json:"privacy_state_inventory,omitempty"`
	PrivacyStateGifts       *int32 `protobuf:"varint,3,opt,name=privacy_state_gifts,json=privacyStateGifts" json:"privacy_state_gifts,omitempty"`
	PrivacyStateOwnedgames  *int32 `protobuf:"varint,4,opt,name=privacy_state_ownedgames,json=privacyStateOwnedgames" json:"privacy_state_ownedgames,omitempty"`
	PrivacyStatePlaytime    *int32 `protobuf:"varint,5,opt,name=privacy_state_playtime,json=privacyStatePlaytime" json:"privacy_state_playtime,omitempty"`
	PrivacyStateFriendslist *int32 `protobuf:"varint,6,opt,name=privacy_state_friendslist,json=privacyStateFriendslist" json:"privacy_state_friendslist,omitempty"`
}

func (x *CPrivacySettings) Reset() {
	*x = CPrivacySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPrivacySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPrivacySettings) ProtoMessage() {}

func (x *CPrivacySettings) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPrivacySettings.ProtoReflect.Descriptor instead.
func (*CPrivacySettings) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{73}
}

func (x *CPrivacySettings) GetPrivacyState() int32 {
	if x != nil && x.PrivacyState != nil {
		return *x.PrivacyState
	}
	return 0
}

func (x *CPrivacySettings) GetPrivacyStateInventory() int32 {
	if x != nil && x.PrivacyStateInventory != nil {
		return *x.PrivacyStateInventory
	}
	return 0
}

func (x *CPrivacySettings) GetPrivacyStateGifts() int32 {
	if x != nil && x.PrivacyStateGifts != nil {
		return *x.PrivacyStateGifts
	}
	return 0
}

func (x *CPrivacySettings) GetPrivacyStateOwnedgames() int32 {
	if x != nil && x.PrivacyStateOwnedgames != nil {
		return *x.PrivacyStateOwnedgames
	}
	return 0
}

func (x *CPrivacySettings) GetPrivacyStatePlaytime() int32 {
	if x != nil && x.PrivacyStatePlaytime != nil {
		return *x.PrivacyStatePlaytime
	}
	return 0
}

func (x *CPrivacySettings) GetPrivacyStateFriendslist() int32 {
	if x != nil && x.PrivacyStateFriendslist != nil {
		return *x.PrivacyStateFriendslist
	}
	return 0
}

type CPlayer_GetPrivacySettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivacySettings *CPrivacySettings `protobuf:"bytes,1,opt,name=privacy_settings,json=privacySettings" json:"privacy_settings,omitempty"`
}

func (x *CPlayer_GetPrivacySettings_Response) Reset() {
	*x = CPlayer_GetPrivacySettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetPrivacySettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPrivacySettings_Response) ProtoMessage() {}

func (x *CPlayer_GetPrivacySettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPrivacySettings_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPrivacySettings_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{74}
}

func (x *CPlayer_GetPrivacySettings_Response) GetPrivacySettings() *CPrivacySettings {
	if x != nil {
		return x.PrivacySettings
	}
	return nil
}

type CPlayer_GetDurationControl_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CPlayer_GetDurationControl_Request) Reset() {
	*x = CPlayer_GetDurationControl_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetDurationControl_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetDurationControl_Request) ProtoMessage() {}

func (x *CPlayer_GetDurationControl_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetDurationControl_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetDurationControl_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{75}
}

func (x *CPlayer_GetDurationControl_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPlayer_GetDurationControl_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnabled           *bool   `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	Seconds             *int32  `protobuf:"varint,2,opt,name=seconds" json:"seconds,omitempty"`
	SecondsToday        *int32  `protobuf:"varint,3,opt,name=seconds_today,json=secondsToday" json:"seconds_today,omitempty"`
	IsSteamchinaAccount *bool   `protobuf:"varint,4,opt,name=is_steamchina_account,json=isSteamchinaAccount" json:"is_steamchina_account,omitempty"`
	IsAgeVerified       *bool   `protobuf:"varint,5,opt,name=is_age_verified,json=isAgeVerified" json:"is_age_verified,omitempty"`
	SecondsAllowedToday *uint32 `protobuf:"varint,6,opt,name=seconds_allowed_today,json=secondsAllowedToday" json:"seconds_allowed_today,omitempty"`
}

func (x *CPlayer_GetDurationControl_Response) Reset() {
	*x = CPlayer_GetDurationControl_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetDurationControl_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetDurationControl_Response) ProtoMessage() {}

func (x *CPlayer_GetDurationControl_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetDurationControl_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetDurationControl_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{76}
}

func (x *CPlayer_GetDurationControl_Response) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

func (x *CPlayer_GetDurationControl_Response) GetSeconds() int32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *CPlayer_GetDurationControl_Response) GetSecondsToday() int32 {
	if x != nil && x.SecondsToday != nil {
		return *x.SecondsToday
	}
	return 0
}

func (x *CPlayer_GetDurationControl_Response) GetIsSteamchinaAccount() bool {
	if x != nil && x.IsSteamchinaAccount != nil {
		return *x.IsSteamchinaAccount
	}
	return false
}

func (x *CPlayer_GetDurationControl_Response) GetIsAgeVerified() bool {
	if x != nil && x.IsAgeVerified != nil {
		return *x.IsAgeVerified
	}
	return false
}

func (x *CPlayer_GetDurationControl_Response) GetSecondsAllowedToday() uint32 {
	if x != nil && x.SecondsAllowedToday != nil {
		return *x.SecondsAllowedToday
	}
	return 0
}

type CPlayer_LastPlayedTimes_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []*CPlayer_GetLastPlayedTimes_Response_Game `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
}

func (x *CPlayer_LastPlayedTimes_Notification) Reset() {
	*x = CPlayer_LastPlayedTimes_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_LastPlayedTimes_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_LastPlayedTimes_Notification) ProtoMessage() {}

func (x *CPlayer_LastPlayedTimes_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_LastPlayedTimes_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_LastPlayedTimes_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{77}
}

func (x *CPlayer_LastPlayedTimes_Notification) GetGames() []*CPlayer_GetLastPlayedTimes_Response_Game {
	if x != nil {
		return x.Games
	}
	return nil
}

type CPlayer_FriendNicknameChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid    *uint32 `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
	Nickname     *string `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	IsEchoToSelf *bool   `protobuf:"varint,3,opt,name=is_echo_to_self,json=isEchoToSelf" json:"is_echo_to_self,omitempty"`
}

func (x *CPlayer_FriendNicknameChanged_Notification) Reset() {
	*x = CPlayer_FriendNicknameChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_FriendNicknameChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_FriendNicknameChanged_Notification) ProtoMessage() {}

func (x *CPlayer_FriendNicknameChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_FriendNicknameChanged_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_FriendNicknameChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{78}
}

func (x *CPlayer_FriendNicknameChanged_Notification) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPlayer_FriendNicknameChanged_Notification) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *CPlayer_FriendNicknameChanged_Notification) GetIsEchoToSelf() bool {
	if x != nil && x.IsEchoToSelf != nil {
		return *x.IsEchoToSelf
	}
	return false
}

type CPlayer_FriendEquippedProfileItemsChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CPlayer_FriendEquippedProfileItemsChanged_Notification) Reset() {
	*x = CPlayer_FriendEquippedProfileItemsChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_FriendEquippedProfileItemsChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_FriendEquippedProfileItemsChanged_Notification) ProtoMessage() {}

func (x *CPlayer_FriendEquippedProfileItemsChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_FriendEquippedProfileItemsChanged_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_FriendEquippedProfileItemsChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{79}
}

func (x *CPlayer_FriendEquippedProfileItemsChanged_Notification) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CPlayer_NewSteamAnnouncementState_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                *int32  `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
	AnnouncementHeadline *string `protobuf:"bytes,2,opt,name=announcement_headline,json=announcementHeadline" json:"announcement_headline,omitempty"`
	AnnouncementUrl      *string `protobuf:"bytes,3,opt,name=announcement_url,json=announcementUrl" json:"announcement_url,omitempty"`
	TimePosted           *uint32 `protobuf:"varint,4,opt,name=time_posted,json=timePosted" json:"time_posted,omitempty"`
	AnnouncementGid      *uint64 `protobuf:"varint,5,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) Reset() {
	*x = CPlayer_NewSteamAnnouncementState_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_NewSteamAnnouncementState_Notification) ProtoMessage() {}

func (x *CPlayer_NewSteamAnnouncementState_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_NewSteamAnnouncementState_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_NewSteamAnnouncementState_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{80}
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) GetAnnouncementHeadline() string {
	if x != nil && x.AnnouncementHeadline != nil {
		return *x.AnnouncementHeadline
	}
	return ""
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) GetAnnouncementUrl() string {
	if x != nil && x.AnnouncementUrl != nil {
		return *x.AnnouncementUrl
	}
	return ""
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) GetTimePosted() uint32 {
	if x != nil && x.TimePosted != nil {
		return *x.TimePosted
	}
	return 0
}

func (x *CPlayer_NewSteamAnnouncementState_Notification) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

type CPlayer_CommunityPreferencesChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences *CPlayer_CommunityPreferences `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
}

func (x *CPlayer_CommunityPreferencesChanged_Notification) Reset() {
	*x = CPlayer_CommunityPreferencesChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_CommunityPreferencesChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_CommunityPreferencesChanged_Notification) ProtoMessage() {}

func (x *CPlayer_CommunityPreferencesChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_CommunityPreferencesChanged_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_CommunityPreferencesChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{81}
}

func (x *CPlayer_CommunityPreferencesChanged_Notification) GetPreferences() *CPlayer_CommunityPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_PerFriendPreferencesChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid   *uint32               `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
	Preferences *PerFriendPreferences `protobuf:"bytes,2,opt,name=preferences" json:"preferences,omitempty"`
}

func (x *CPlayer_PerFriendPreferencesChanged_Notification) Reset() {
	*x = CPlayer_PerFriendPreferencesChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_PerFriendPreferencesChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_PerFriendPreferencesChanged_Notification) ProtoMessage() {}

func (x *CPlayer_PerFriendPreferencesChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_PerFriendPreferencesChanged_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_PerFriendPreferencesChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{82}
}

func (x *CPlayer_PerFriendPreferencesChanged_Notification) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPlayer_PerFriendPreferencesChanged_Notification) GetPreferences() *PerFriendPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_PrivacySettingsChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivacySettings *CPrivacySettings `protobuf:"bytes,1,opt,name=privacy_settings,json=privacySettings" json:"privacy_settings,omitempty"`
}

func (x *CPlayer_PrivacySettingsChanged_Notification) Reset() {
	*x = CPlayer_PrivacySettingsChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_PrivacySettingsChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_PrivacySettingsChanged_Notification) ProtoMessage() {}

func (x *CPlayer_PrivacySettingsChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_PrivacySettingsChanged_Notification.ProtoReflect.Descriptor instead.
func (*CPlayer_PrivacySettingsChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{83}
}

func (x *CPlayer_PrivacySettingsChanged_Notification) GetPrivacySettings() *CPrivacySettings {
	if x != nil {
		return x.PrivacySettings
	}
	return nil
}

type CPlayer_GetOwnedGames_Response_Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                    *int32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Name                     *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Playtime_2Weeks          *int32  `protobuf:"varint,3,opt,name=playtime_2weeks,json=playtime2weeks" json:"playtime_2weeks,omitempty"`
	PlaytimeForever          *int32  `protobuf:"varint,4,opt,name=playtime_forever,json=playtimeForever" json:"playtime_forever,omitempty"`
	ImgIconUrl               *string `protobuf:"bytes,5,opt,name=img_icon_url,json=imgIconUrl" json:"img_icon_url,omitempty"`
	ImgLogoUrl               *string `protobuf:"bytes,6,opt,name=img_logo_url,json=imgLogoUrl" json:"img_logo_url,omitempty"`
	HasCommunityVisibleStats *bool   `protobuf:"varint,7,opt,name=has_community_visible_stats,json=hasCommunityVisibleStats" json:"has_community_visible_stats,omitempty"`
	PlaytimeWindowsForever   *int32  `protobuf:"varint,8,opt,name=playtime_windows_forever,json=playtimeWindowsForever" json:"playtime_windows_forever,omitempty"`
	PlaytimeMacForever       *int32  `protobuf:"varint,9,opt,name=playtime_mac_forever,json=playtimeMacForever" json:"playtime_mac_forever,omitempty"`
	PlaytimeLinuxForever     *int32  `protobuf:"varint,10,opt,name=playtime_linux_forever,json=playtimeLinuxForever" json:"playtime_linux_forever,omitempty"`
}

func (x *CPlayer_GetOwnedGames_Response_Game) Reset() {
	*x = CPlayer_GetOwnedGames_Response_Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetOwnedGames_Response_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetOwnedGames_Response_Game) ProtoMessage() {}

func (x *CPlayer_GetOwnedGames_Response_Game) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetOwnedGames_Response_Game.ProtoReflect.Descriptor instead.
func (*CPlayer_GetOwnedGames_Response_Game) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetPlaytime_2Weeks() int32 {
	if x != nil && x.Playtime_2Weeks != nil {
		return *x.Playtime_2Weeks
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetPlaytimeForever() int32 {
	if x != nil && x.PlaytimeForever != nil {
		return *x.PlaytimeForever
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetImgIconUrl() string {
	if x != nil && x.ImgIconUrl != nil {
		return *x.ImgIconUrl
	}
	return ""
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetImgLogoUrl() string {
	if x != nil && x.ImgLogoUrl != nil {
		return *x.ImgLogoUrl
	}
	return ""
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetHasCommunityVisibleStats() bool {
	if x != nil && x.HasCommunityVisibleStats != nil {
		return *x.HasCommunityVisibleStats
	}
	return false
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetPlaytimeWindowsForever() int32 {
	if x != nil && x.PlaytimeWindowsForever != nil {
		return *x.PlaytimeWindowsForever
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetPlaytimeMacForever() int32 {
	if x != nil && x.PlaytimeMacForever != nil {
		return *x.PlaytimeMacForever
	}
	return 0
}

func (x *CPlayer_GetOwnedGames_Response_Game) GetPlaytimeLinuxForever() int32 {
	if x != nil && x.PlaytimeLinuxForever != nil {
		return *x.PlaytimeLinuxForever
	}
	return 0
}

type CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid              *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MinutesPlayed        *uint32 `protobuf:"varint,2,opt,name=minutes_played,json=minutesPlayed" json:"minutes_played,omitempty"`
	MinutesPlayedForever *uint32 `protobuf:"varint,3,opt,name=minutes_played_forever,json=minutesPlayedForever" json:"minutes_played_forever,omitempty"`
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) GetMinutesPlayed() uint32 {
	if x != nil && x.MinutesPlayed != nil {
		return *x.MinutesPlayed
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) GetMinutesPlayedForever() uint32 {
	if x != nil && x.MinutesPlayedForever != nil {
		return *x.MinutesPlayedForever
	}
	return 0
}

type CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid              *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MinutesPlayed        *uint32 `protobuf:"varint,2,opt,name=minutes_played,json=minutesPlayed" json:"minutes_played,omitempty"`
	MinutesPlayedForever *uint32 `protobuf:"varint,3,opt,name=minutes_played_forever,json=minutesPlayedForever" json:"minutes_played_forever,omitempty"`
	InWishlist           *bool   `protobuf:"varint,4,opt,name=in_wishlist,json=inWishlist" json:"in_wishlist,omitempty"`
	Owned                *bool   `protobuf:"varint,5,opt,name=owned" json:"owned,omitempty"`
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{8, 1}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetMinutesPlayed() uint32 {
	if x != nil && x.MinutesPlayed != nil {
		return *x.MinutesPlayed
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetMinutesPlayedForever() uint32 {
	if x != nil && x.MinutesPlayedForever != nil {
		return *x.MinutesPlayedForever
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetInWishlist() bool {
	if x != nil && x.InWishlist != nil {
		return *x.InWishlist
	}
	return false
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetOwned() bool {
	if x != nil && x.Owned != nil {
		return *x.Owned
	}
	return false
}

type CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid               *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MinutesPlayedThisWeek *uint32 `protobuf:"varint,2,opt,name=minutes_played_this_week,json=minutesPlayedThisWeek" json:"minutes_played_this_week,omitempty"`
	MinutesPlayedTwoWeeks *uint32 `protobuf:"varint,3,opt,name=minutes_played_two_weeks,json=minutesPlayedTwoWeeks" json:"minutes_played_two_weeks,omitempty"`
	MinutesPlayedForever  *uint32 `protobuf:"varint,4,opt,name=minutes_played_forever,json=minutesPlayedForever" json:"minutes_played_forever,omitempty"`
	EventCount            *uint32 `protobuf:"varint,5,opt,name=event_count,json=eventCount" json:"event_count,omitempty"`
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) Reset() {
	*x = CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) ProtoMessage() {}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) GetMinutesPlayedThisWeek() uint32 {
	if x != nil && x.MinutesPlayedThisWeek != nil {
		return *x.MinutesPlayedThisWeek
	}
	return 0
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) GetMinutesPlayedTwoWeeks() uint32 {
	if x != nil && x.MinutesPlayedTwoWeeks != nil {
		return *x.MinutesPlayedTwoWeeks
	}
	return 0
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) GetMinutesPlayedForever() uint32 {
	if x != nil && x.MinutesPlayedForever != nil {
		return *x.MinutesPlayedForever
	}
	return 0
}

func (x *CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime) GetEventCount() uint32 {
	if x != nil && x.EventCount != nil {
		return *x.EventCount
	}
	return 0
}

type CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid        *uint32                                                   `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Friends      []*CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime `protobuf:"bytes,2,rep,name=friends" json:"friends,omitempty"`
	DisplayOrder *uint32                                                   `protobuf:"varint,3,opt,name=display_order,json=displayOrder" json:"display_order,omitempty"`
}

func (x *CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) Reset() {
	*x = CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) ProtoMessage() {}

func (x *CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{10, 1}
}

func (x *CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) GetFriends() []*CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo) GetDisplayOrder() uint32 {
	if x != nil && x.DisplayOrder != nil {
		return *x.DisplayOrder
	}
	return 0
}

type CPlayer_GetGameBadgeLevels_Response_Badge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level       *int32  `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Series      *int32  `protobuf:"varint,2,opt,name=series" json:"series,omitempty"`
	BorderColor *uint32 `protobuf:"varint,3,opt,name=border_color,json=borderColor" json:"border_color,omitempty"`
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) Reset() {
	*x = CPlayer_GetGameBadgeLevels_Response_Badge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetGameBadgeLevels_Response_Badge) ProtoMessage() {}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetGameBadgeLevels_Response_Badge.ProtoReflect.Descriptor instead.
func (*CPlayer_GetGameBadgeLevels_Response_Badge) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) GetSeries() int32 {
	if x != nil && x.Series != nil {
		return *x.Series
	}
	return 0
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) GetBorderColor() uint32 {
	if x != nil && x.BorderColor != nil {
		return *x.BorderColor
	}
	return 0
}

type CPlayer_GetEmoticonList_Response_Emoticon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Count        *int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	TimeLastUsed *uint32 `protobuf:"varint,3,opt,name=time_last_used,json=timeLastUsed" json:"time_last_used,omitempty"`
	UseCount     *uint32 `protobuf:"varint,4,opt,name=use_count,json=useCount" json:"use_count,omitempty"`
	TimeReceived *uint32 `protobuf:"varint,5,opt,name=time_received,json=timeReceived" json:"time_received,omitempty"`
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) Reset() {
	*x = CPlayer_GetEmoticonList_Response_Emoticon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetEmoticonList_Response_Emoticon) ProtoMessage() {}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetEmoticonList_Response_Emoticon.ProtoReflect.Descriptor instead.
func (*CPlayer_GetEmoticonList_Response_Emoticon) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{37, 0}
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) GetTimeLastUsed() uint32 {
	if x != nil && x.TimeLastUsed != nil {
		return *x.TimeLastUsed
	}
	return 0
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) GetUseCount() uint32 {
	if x != nil && x.UseCount != nil {
		return *x.UseCount
	}
	return 0
}

func (x *CPlayer_GetEmoticonList_Response_Emoticon) GetTimeReceived() uint32 {
	if x != nil && x.TimeReceived != nil {
		return *x.TimeReceived
	}
	return 0
}

type CPlayer_GetAchievementsProgress_Response_AchievementProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid       *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Unlocked    *uint32  `protobuf:"varint,2,opt,name=unlocked" json:"unlocked,omitempty"`
	Total       *uint32  `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
	Percentage  *float32 `protobuf:"fixed32,4,opt,name=percentage" json:"percentage,omitempty"`
	AllUnlocked *bool    `protobuf:"varint,5,opt,name=all_unlocked,json=allUnlocked" json:"all_unlocked,omitempty"`
	CacheTime   *uint32  `protobuf:"varint,6,opt,name=cache_time,json=cacheTime" json:"cache_time,omitempty"`
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) Reset() {
	*x = CPlayer_GetAchievementsProgress_Response_AchievementProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAchievementsProgress_Response_AchievementProgress) ProtoMessage() {}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAchievementsProgress_Response_AchievementProgress.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAchievementsProgress_Response_AchievementProgress) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{39, 0}
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) GetUnlocked() uint32 {
	if x != nil && x.Unlocked != nil {
		return *x.Unlocked
	}
	return 0
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) GetPercentage() float32 {
	if x != nil && x.Percentage != nil {
		return *x.Percentage
	}
	return 0
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) GetAllUnlocked() bool {
	if x != nil && x.AllUnlocked != nil {
		return *x.AllUnlocked
	}
	return false
}

func (x *CPlayer_GetAchievementsProgress_Response_AchievementProgress) GetCacheTime() uint32 {
	if x != nil && x.CacheTime != nil {
		return *x.CacheTime
	}
	return 0
}

type CPlayer_GetLastPlayedTimes_Response_Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                  *int32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	LastPlaytime           *uint32 `protobuf:"varint,2,opt,name=last_playtime,json=lastPlaytime" json:"last_playtime,omitempty"`
	Playtime_2Weeks        *int32  `protobuf:"varint,3,opt,name=playtime_2weeks,json=playtime2weeks" json:"playtime_2weeks,omitempty"`
	PlaytimeForever        *int32  `protobuf:"varint,4,opt,name=playtime_forever,json=playtimeForever" json:"playtime_forever,omitempty"`
	FirstPlaytime          *uint32 `protobuf:"varint,5,opt,name=first_playtime,json=firstPlaytime" json:"first_playtime,omitempty"`
	PlaytimeWindowsForever *int32  `protobuf:"varint,6,opt,name=playtime_windows_forever,json=playtimeWindowsForever" json:"playtime_windows_forever,omitempty"`
	PlaytimeMacForever     *int32  `protobuf:"varint,7,opt,name=playtime_mac_forever,json=playtimeMacForever" json:"playtime_mac_forever,omitempty"`
	PlaytimeLinuxForever   *int32  `protobuf:"varint,8,opt,name=playtime_linux_forever,json=playtimeLinuxForever" json:"playtime_linux_forever,omitempty"`
	FirstWindowsPlaytime   *uint32 `protobuf:"varint,9,opt,name=first_windows_playtime,json=firstWindowsPlaytime" json:"first_windows_playtime,omitempty"`
	FirstMacPlaytime       *uint32 `protobuf:"varint,10,opt,name=first_mac_playtime,json=firstMacPlaytime" json:"first_mac_playtime,omitempty"`
	FirstLinuxPlaytime     *uint32 `protobuf:"varint,11,opt,name=first_linux_playtime,json=firstLinuxPlaytime" json:"first_linux_playtime,omitempty"`
	LastWindowsPlaytime    *uint32 `protobuf:"varint,12,opt,name=last_windows_playtime,json=lastWindowsPlaytime" json:"last_windows_playtime,omitempty"`
	LastMacPlaytime        *uint32 `protobuf:"varint,13,opt,name=last_mac_playtime,json=lastMacPlaytime" json:"last_mac_playtime,omitempty"`
	LastLinuxPlaytime      *uint32 `protobuf:"varint,14,opt,name=last_linux_playtime,json=lastLinuxPlaytime" json:"last_linux_playtime,omitempty"`
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) Reset() {
	*x = CPlayer_GetLastPlayedTimes_Response_Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetLastPlayedTimes_Response_Game) ProtoMessage() {}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetLastPlayedTimes_Response_Game.ProtoReflect.Descriptor instead.
func (*CPlayer_GetLastPlayedTimes_Response_Game) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{47, 0}
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetLastPlaytime() uint32 {
	if x != nil && x.LastPlaytime != nil {
		return *x.LastPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytime_2Weeks() int32 {
	if x != nil && x.Playtime_2Weeks != nil {
		return *x.Playtime_2Weeks
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytimeForever() int32 {
	if x != nil && x.PlaytimeForever != nil {
		return *x.PlaytimeForever
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetFirstPlaytime() uint32 {
	if x != nil && x.FirstPlaytime != nil {
		return *x.FirstPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytimeWindowsForever() int32 {
	if x != nil && x.PlaytimeWindowsForever != nil {
		return *x.PlaytimeWindowsForever
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytimeMacForever() int32 {
	if x != nil && x.PlaytimeMacForever != nil {
		return *x.PlaytimeMacForever
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytimeLinuxForever() int32 {
	if x != nil && x.PlaytimeLinuxForever != nil {
		return *x.PlaytimeLinuxForever
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetFirstWindowsPlaytime() uint32 {
	if x != nil && x.FirstWindowsPlaytime != nil {
		return *x.FirstWindowsPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetFirstMacPlaytime() uint32 {
	if x != nil && x.FirstMacPlaytime != nil {
		return *x.FirstMacPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetFirstLinuxPlaytime() uint32 {
	if x != nil && x.FirstLinuxPlaytime != nil {
		return *x.FirstLinuxPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetLastWindowsPlaytime() uint32 {
	if x != nil && x.LastWindowsPlaytime != nil {
		return *x.LastWindowsPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetLastMacPlaytime() uint32 {
	if x != nil && x.LastMacPlaytime != nil {
		return *x.LastMacPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetLastLinuxPlaytime() uint32 {
	if x != nil && x.LastLinuxPlaytime != nil {
		return *x.LastLinuxPlaytime
	}
	return 0
}

type CPlayer_GetNicknameList_Response_PlayerNickname struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
	Nickname  *string `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) Reset() {
	*x = CPlayer_GetNicknameList_Response_PlayerNickname{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamclient_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNicknameList_Response_PlayerNickname) ProtoMessage() {}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamclient_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNicknameList_Response_PlayerNickname.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNicknameList_Response_PlayerNickname) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamclient_proto_rawDescGZIP(), []int{51, 0}
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

var File_steammessages_player_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_player_steamclient_proto_rawDesc = []byte{
	0x0a, 0x26, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x32, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x26,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x19, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x33,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x24, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x20, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0xbc, 0x04, 0x0a,
	0x1d, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x21, 0x82, 0xb5, 0x18, 0x1d, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20,
	0x77, 0x65, 0x27, 0x72, 0x65, 0x20, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x6c, 0x0a, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x43, 0x82, 0xb5, 0x18, 0x3f, 0x74, 0x72, 0x75, 0x65, 0x20, 0x69,
	0x66, 0x20, 0x77, 0x65, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x28, 0x6e, 0x61,
	0x6d, 0x65, 0x2c, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x29, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x65, 0x61, 0x63, 0x68, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x41, 0x70, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xa4, 0x01, 0x0a, 0x19, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x69, 0x82,
	0xb5, 0x18, 0x65, 0x46, 0x72, 0x65, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x61, 0x72,
	0x65, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x20, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x46, 0x72, 0x65, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x5b, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x69, 0x66, 0x20,
	0x73, 0x65, 0x74, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x20, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x70, 0x70, 0x73, 0x52,
	0x0c, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x6c, 0x0a,
	0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x75,
	0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x42, 0x82, 0xb5, 0x18, 0x3e, 0x53, 0x6f, 0x6d,
	0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x73, 0x75, 0x62, 0x2c, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x0e, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x46, 0x72, 0x65, 0x65, 0x53, 0x75, 0x62, 0x22, 0xa7, 0x04, 0x0a, 0x1e,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0xa9, 0x03, 0x0a, 0x04, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x32, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x32,
	0x77, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x67, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x67, 0x4c, 0x6f, 0x67,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x68, 0x61, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x6c, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x63, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x46, 0x6f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x1b, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64,
	0x73, 0x22, 0x60, 0x0a, 0x1c, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x73, 0x22, 0x3e, 0x0a, 0x26, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x22, 0x9f, 0x07, 0x0a, 0x27, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x09, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x77, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x79, 0x6f,
	0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a,
	0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x04, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x73, 0x68,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x57, 0x69, 0x73, 0x68,
	0x6c, 0x69, 0x73, 0x74, 0x1a, 0x8c, 0x01, 0x0a, 0x13, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f,
	0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x1a, 0xbf, 0x01, 0x0a, 0x0f, 0x4f, 0x77, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x22, 0xa3, 0x02, 0x0a, 0x26, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x8f, 0x01, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6a, 0x82, 0xb5, 0x18, 0x66, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x74, 0x6f, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x6e, 0x65, 0x77, 0x73, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x28, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73,
	0x73, 0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x29, 0x2e, 0x20, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x55, 0x4e, 0x55,
	0x53, 0x45, 0x44, 0x2e, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x73, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x67, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x42, 0x82, 0xb5, 0x18, 0x3e, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3b, 0x20, 0x73, 0x65, 0x65,
	0x20, 0x45, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x96, 0x15, 0x0a, 0x27,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc2, 0x01, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41,
	0x70, 0x70, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x6d, 0x82, 0xb5, 0x18, 0x69, 0x41, 0x70, 0x70, 0x73, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x77, 0x65, 0x65, 0x6b, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x2c,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x77, 0x68, 0x6f, 0x27, 0x76, 0x65, 0x20, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x65,
	0x65, 0x6b, 0x52, 0x08, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0xc5, 0x01, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x41, 0x70, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x61, 0x82, 0xb5, 0x18, 0x5d, 0x41, 0x70, 0x70, 0x73, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x74, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x77,
	0x65, 0x65, 0x6b, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x20, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x07, 0x75, 0x6e, 0x6f, 0x77, 0x6e, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x70, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x54, 0x82, 0xb5, 0x18, 0x50, 0x41, 0x70, 0x70, 0x73, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x74, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x77, 0x65,
	0x65, 0x6b, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x20, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x75, 0x6e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x12, 0xb8,
	0x01, 0x0a, 0x07, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x65, 0x82, 0xb5, 0x18, 0x61, 0x41,
	0x70, 0x70, 0x73, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65,
	0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	0x61, 0x73, 0x74, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x2c, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2c,
	0x20, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x07, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x12, 0xd2, 0x01, 0x0a, 0x0b, 0x64, 0x6f,
	0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x78, 0x82, 0xb5, 0x18, 0x74, 0x41, 0x70,
	0x70, 0x73, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61,
	0x73, 0x74, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20,
	0x6e, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x64, 0x20, 0x6e, 0x6f, 0x72, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x74, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x77, 0x65, 0x65,
	0x6b, 0x73, 0x52, 0x0a, 0x64, 0x6f, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x12, 0xd1,
	0x01, 0x0a, 0x0f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x6f, 0x82, 0xb5, 0x18, 0x6b, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x20, 0x61, 0x70, 0x70,
	0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x68,
	0x61, 0x76, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x74,
	0x20, 0x74, 0x77, 0x6f, 0x20, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x2e, 0x20, 0x44, 0x45, 0x50, 0x52,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x55, 0x4e, 0x55, 0x53, 0x45,
	0x44, 0x2e, 0x52, 0x0e, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x65, 0x64, 0x12, 0xa0, 0x01, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70,
	0x70, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x20, 0x61, 0x70,
	0x70, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x79, 0x6f, 0x75, 0x72, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x68, 0x61, 0x64,
	0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x20, 0x74, 0x6f,
	0x20, 0x32, 0x20, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x2e, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x54, 0x6f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xaa, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x45, 0x82, 0xb5, 0x18, 0x41,
	0x4f, 0x77, 0x6e, 0x65, 0x64, 0x20, 0x61, 0x70, 0x70, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x68, 0x61, 0x64, 0x6e, 0x27, 0x74, 0x20, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x77, 0x68, 0x69, 0x6c,
	0x65, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e,
	0x2e, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x79, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x42, 0x46, 0x82, 0xb5, 0x18, 0x42, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6e,
	0x6f, 0x6e, 0x2d, 0x74, 0x72, 0x69, 0x76, 0x69, 0x61, 0x6c, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x74, 0x20,
	0x74, 0x77, 0x6f, 0x20, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x2e, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xec, 0x04,
	0x0a, 0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x18, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x68,
	0x69, 0x73, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x51, 0x82,
	0xb5, 0x18, 0x4d, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x20, 0x28, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x29, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x65, 0x65, 0x6b, 0x2e,
	0x52, 0x15, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54,
	0x68, 0x69, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x94, 0x01, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x77,
	0x65, 0x65, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5b, 0x82, 0xb5, 0x18, 0x57,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67,
	0x61, 0x6d, 0x65, 0x20, 0x28, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e,
	0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x74, 0x20, 0x32,
	0x20, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x2e, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x86,
	0x01, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x50, 0x82, 0xb5, 0x18, 0x4c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x20, 0x28, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x29, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x71, 0x82,
	0xb5, 0x18, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x26, 0x20, 0x61, 0x70, 0x70, 0x2e, 0x20, 0x28,
	0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x73, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x75, 0x73, 0x73, 0x65, 0x64, 0x2e, 0x29, 0x20, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x2e,
	0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x95, 0x03, 0x0a,
	0x0e, 0x41, 0x70, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0xd2, 0x01, 0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x7f, 0x82, 0xb5, 0x18, 0x7b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x28, 0x77,
	0x2f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x29, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x6d, 0x65, 0x65, 0x74, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x20, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x20, 0x2d, 0x2d, 0x20, 0x65, 0x2e, 0x67,
	0x2e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2c, 0x20,
	0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x77, 0x2f, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x70, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x65, 0x65, 0x6b,
	0x2e, 0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x72, 0x82, 0xb5, 0x18, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x61, 0x70, 0x70, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x2c, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x70, 0x70, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x22, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x22, 0xe6, 0x01, 0x0a, 0x23, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x06, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x64,
	0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x1a,
	0x58, 0x0a, 0x05, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x7f, 0x0a, 0x24, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x20, 0x77, 0x65, 0x27, 0x72, 0x65, 0x20, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x84, 0x05, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x69, 0x74,
	0x65, 0x6d, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x20, 0x6f, 0x72, 0x20, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x82, 0xb5, 0x18, 0x10, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x52,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x65,
	0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x82, 0xb5, 0x18, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0x82, 0xb5, 0x18, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x74, 0x65, 0x6d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x36, 0x0a,
	0x0a, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x55, 0x52, 0x4c, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x65,
	0x62, 0x6d, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x61, 0x6e, 0x79, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x57, 0x65, 0x62, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x6d,
	0x70, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x82, 0xb5, 0x18, 0x12, 0x55, 0x52,
	0x4c, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x70, 0x34, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x61, 0x6e, 0x79,
	0x52, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x4d, 0x70, 0x34, 0x12, 0x65, 0x0a, 0x0e, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x3e, 0x82, 0xb5, 0x18, 0x3a, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x20,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x20, 0x28, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x46, 0x6c, 0x61,
	0x67, 0x29, 0x52, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0x64, 0x0a, 0x25, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x12, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x50, 0x0a, 0x24, 0x43, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x69, 0x74, 0x65, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x28, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x20, 0x77, 0x65, 0x27, 0x72, 0x65, 0x20, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x68, 0x0a, 0x29, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x22, 0x54, 0x0a, 0x28, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65,
	0x74, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x1e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x54, 0x68,
	0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x77, 0x65, 0x27, 0x72, 0x65, 0x20, 0x61,
	0x73, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x22, 0x52, 0x0a, 0x1f, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x1e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x53, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64,
	0x22, 0x21, 0x0a, 0x1f, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x7c, 0x0a, 0x21, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47,
	0x65, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x54,
	0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x77, 0x65, 0x27, 0x72, 0x65, 0x20,
	0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0x4a, 0x0a, 0x22, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x4d, 0x0a,
	0x21, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x69,
	0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x22,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x42, 0x0a, 0x24, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4f, 0x77, 0x6e,
	0x65, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x25, 0x43, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x46, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x16, 0x6d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x10, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x5f,
	0x0a, 0x27, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22,
	0xce, 0x02, 0x0a, 0x28, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x17, 0x6d, 0x69, 0x6e,
	0x69, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x2f, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x37, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x92, 0x01, 0x0a, 0x2b, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x69, 0x74, 0x65,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x53,
	0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x2e, 0x0a, 0x2c, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x53, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x20, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x09, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x6d,
	0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x1a, 0x9c, 0x01, 0x0a, 0x08, 0x45, 0x6d, 0x6f, 0x74,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x77, 0x0a, 0x27, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x22,
	0xde, 0x02, 0x0a, 0x28, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x14,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x13, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xbf,
	0x01, 0x0a, 0x13, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x5c, 0x0a, 0x23, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x50, 0x6f, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x6f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x22, 0x26,
	0x0a, 0x24, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x6f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x0a, 0x1f, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d,
	0x54, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x77, 0x65, 0x27, 0x72, 0x65,
	0x20, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x64, 0x22, 0xa9,
	0x01, 0x0a, 0x20, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x22, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x91, 0x01, 0x0a, 0x22, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x43, 0x82, 0xb5, 0x18, 0x3f, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x73, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x22, 0xed, 0x05, 0x0a, 0x23, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x84, 0x05, 0x0a,
	0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x32, 0x77, 0x65,
	0x65, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x32, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x70,
	0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x70,
	0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x46, 0x6f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x63,
	0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x53, 0x41, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x53, 0x53, 0x41, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x0a, 0x1f, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xbe, 0x01, 0x0a, 0x20, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65,
	0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x84, 0x07,
	0x0a, 0x14, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x78, 0x0a, 0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x26, 0x6b, 0x5f, 0x45, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x78, 0x0a, 0x18, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x3a, 0x26, 0x6b, 0x5f, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x17, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x7c, 0x0a, 0x1a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a,
	0x26, 0x6b, 0x5f, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x6a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x68, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x3a, 0x26, 0x6b, 0x5f, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x6a,
	0x0a, 0x11, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x3a, 0x26, 0x6b, 0x5f, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x53, 0x68, 0x6f, 0x77, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x26,
	0x6b, 0x5f, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x18, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x3a, 0x26, 0x6b, 0x5f, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x17, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x22, 0x63, 0x0a, 0x28, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x27, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x65, 0x72, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x2a, 0x0a,
	0x28, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x0a, 0x19, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x35, 0x82, 0xb5, 0x18, 0x31, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f,
	0x20, 0x77, 0x68, 0x6f, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x61, 0x20,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0xae, 0x02, 0x0a, 0x1a, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3a, 0x82, 0xb5, 0x18,
	0x36, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x2c, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x2e, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53,
	0x65, 0x6e, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x69, 0x82, 0xb5, 0x18, 0x65, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x20, 0x20, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6d, 0x6f, 0x76, 0x65,
	0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x20, 0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e,
	0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5b, 0x0a, 0x1c, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x2e, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x1d, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x12, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0x92, 0x01, 0x0a, 0x1c, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x12, 0x58, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x3c, 0x82, 0xb5, 0x18, 0x38, 0x49, 0x66, 0x20, 0x73, 0x65, 0x74,
	0x2c, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x20, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x22, 0x70, 0x0a, 0x1d,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0x82, 0xb5, 0x18, 0x1a,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x12, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0x29,
	0x0a, 0x27, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x1c, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1b, 0x68, 0x69,
	0x64, 0x65, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x18, 0x68, 0x69, 0x64, 0x65, 0x41, 0x64, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x39, 0x0a, 0x16, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x13, 0x68, 0x69, 0x64, 0x65, 0x41, 0x64, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x16, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x6b, 0x0a, 0x28, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0x6a, 0x0a, 0x27, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x2a,
	0x0a, 0x28, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x2c, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x2d, 0x43, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33,
	0x0a, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x22, 0x7d, 0x0a, 0x2f, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x22, 0x32, 0x0a, 0x30, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x0a,
	0x22, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xcb, 0x02, 0x0a, 0x10, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x47, 0x69, 0x66, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x63, 0x0a, 0x23, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x3a, 0x0a, 0x22, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x22, 0x93, 0x02, 0x0a, 0x23, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47,
	0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x63, 0x68, 0x69, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x67, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x22, 0x67, 0x0a, 0x24, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x8d, 0x01, 0x0a, 0x2a, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x45, 0x63, 0x68, 0x6f, 0x54, 0x6f, 0x53, 0x65, 0x6c,
	0x66, 0x22, 0x56, 0x0a, 0x36, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x22, 0x73,
	0x0a, 0x30, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x30, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x65,
	0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22,
	0x6b, 0x0a, 0x2b, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2a, 0x85, 0x01, 0x0a,
	0x14, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x76,
	0x65, 0x72, 0x10, 0x02, 0x32, 0xd6, 0x2d, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0xef, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5e, 0x82, 0xb5, 0x18, 0x5a, 0x47, 0x65, 0x74, 0x20, 0x6d, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x79, 0x20,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x75, 0x61, 0x6c, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6c, 0x61, 0x6e, 0x73, 0x29,
	0x2e, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x20, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x7f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x4e,
	0x65, 0x78, 0x74, 0x12, 0x1c, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x33, 0x82, 0xb5, 0x18, 0x2f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20,
	0x6e, 0x65, 0x78, 0x74, 0x2e, 0x12, 0xb8, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x27, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xb5, 0x18, 0x47, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x77,
	0x68, 0x6f, 0x20, 0x61, 0x72, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2c, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x2c, 0x20, 0x6f, 0x77, 0x6e,
	0x2c, 0x20, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x61, 0x20, 0x67, 0x61, 0x6d, 0x65,
	0x12, 0xae, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41,
	0x70, 0x70, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x27, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x41, 0x70, 0x70, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41,
	0x82, 0xb5, 0x18, 0x3d, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x70, 0x70, 0x73, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x61, 0x72,
	0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x2c, 0x20, 0x69, 0x6e, 0x20,
	0x61, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x77, 0x61, 0x79,
	0x73, 0x12, 0xb6, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x64,
	0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xb5, 0x18, 0x51, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x66,
	0x20, 0x69, 0x74, 0x27, 0x73, 0x20, 0x66, 0x6f, 0x69, 0x6c, 0x12, 0xa6, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x25, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3f, 0x82, 0xb5, 0x18, 0x3b, 0x47, 0x65, 0x74, 0x73, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x25, 0x2e, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xb5, 0x18,
	0x22, 0x53, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73,
	0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0xb7, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x29, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x6e, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x47, 0x65, 0x74,
	0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x20, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20,
	0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0x9e, 0x01,
	0x0a, 0x18, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x29, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x53, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x20, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x8e,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x47, 0x65, 0x74, 0x73, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x20, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x87, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xb5, 0x18, 0x2e, 0x53, 0x65, 0x74, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x69,
	0x72, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x22, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xb5, 0x18, 0x38, 0x47, 0x65,
	0x74, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0x93, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x22, 0x2e, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xb5, 0x18, 0x31, 0x53, 0x65, 0x74, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x69, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xa0, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x4f, 0x77, 0x6e, 0x65, 0x64, 0x12, 0x25, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4f,
	0x77, 0x6e, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x65, 0x71, 0x75, 0x69, 0x70, 0x20, 0x6f,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0xac, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x28, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3c, 0x82, 0xb5, 0x18, 0x38, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x68, 0x61, 0x73, 0x20, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x20, 0x6f, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xa7,
	0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2c,
	0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xb5, 0x18,
	0x27, 0x53, 0x65, 0x74, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x91, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74,
	0x69, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63,
	0x6f, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0xb9, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82,
	0xb5, 0x18, 0x45, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x12, 0x91, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x6f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x12, 0x24, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x6f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x6f, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82,
	0xb5, 0x18, 0x29, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x47, 0x65, 0x74, 0x73, 0x20,
	0x61, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20,
	0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x62, 0x79, 0x20, 0x69, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x69, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x18, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x63, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x53, 0x41, 0x12,
	0x1a, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x53, 0x53, 0x41, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x53, 0x41, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x55, 0x73,
	0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x53, 0x53, 0x41, 0x12, 0x94, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3c, 0x82, 0xb5, 0x18, 0x38, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xbd,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4d, 0x82, 0xb5, 0x18, 0x49, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xb7,
	0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x47, 0x82, 0xb5, 0x18, 0x43, 0x53, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x70,
	0x65, 0x72, 0x2d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69,
	0x76, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d,
	0x82, 0xb5, 0x18, 0x29, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74,
	0x6f, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x82, 0x01,
	0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x1d,
	0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82,
	0xb5, 0x18, 0x2f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x20, 0x61, 0x20, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x73, 0x20, 0x61,
	0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xa6, 0x01, 0x0a, 0x0c, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x12, 0x1d, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x49, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x57, 0x82, 0xb5, 0x18, 0x53, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x20, 0x6f,
	0x72, 0x20, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x20, 0x20, 0x44, 0x65, 0x73, 0x70, 0x69, 0x74, 0x65,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20,
	0x6e, 0x6f, 0x6e, 0x2d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x12, 0x9e, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xb5,
	0x18, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x27, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x9b, 0x01, 0x0a,
	0x17, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82,
	0xb5, 0x18, 0x27, 0x53, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x27, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x20, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xde, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82, 0xb5, 0x18, 0x5b,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x77, 0x68, 0x61, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x55, 0x49, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x1f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x30, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x20,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x72, 0x65,
	0x61, 0x64, 0x20, 0x62, 0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x23, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xb5,
	0x18, 0x1d, 0x47, 0x65, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x12,
	0x8c, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x23, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x47, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x47, 0x65, 0x74, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x1a, 0x2d,
	0x82, 0xb5, 0x18, 0x29, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x32, 0xf1, 0x09,
	0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x8c,
	0x01, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xb5,
	0x18, 0x3b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x12, 0xa4, 0x01,
	0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x2b, 0x2e,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xb5, 0x18, 0x47, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x27, 0x73, 0x20,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x12, 0xcb, 0x01, 0x0a, 0x27, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x12, 0x37, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x82, 0xb5, 0x18, 0x56, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x61, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x27, 0x73, 0x20, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x12, 0xa4, 0x01, 0x0a, 0x1f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x65, 0x77,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xb5, 0x18, 0x3f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x73, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0xb9, 0x01, 0x0a, 0x21, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12,
	0x31, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x54, 0x82, 0xb5, 0x18, 0x50, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f,
	0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x69, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0xaa, 0x01, 0x0a, 0x21, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x31, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b,
	0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xb5, 0x18,
	0x41, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70,
	0x65, 0x72, 0x2d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x12, 0x9c, 0x01, 0x0a, 0x23, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x2c, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xb5, 0x18, 0x36, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x1a, 0x2e, 0x82, 0xb5, 0x18, 0x26, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xc0, 0xb5, 0x18,
	0x02, 0x42, 0x03, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_player_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_player_steamclient_proto_rawDescData = file_steammessages_player_steamclient_proto_rawDesc
)

func file_steammessages_player_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_player_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_player_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_player_steamclient_proto_rawDescData)
	})
	return file_steammessages_player_steamclient_proto_rawDescData
}

var file_steammessages_player_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_player_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 94)
var file_steammessages_player_steamclient_proto_goTypes = []any{
	(ENotificationSetting)(0),                                            // 0: ENotificationSetting
	(*CPlayer_GetMutualFriendsForIncomingInvites_Request)(nil),           // 1: CPlayer_GetMutualFriendsForIncomingInvites_Request
	(*CPlayer_IncomingInviteMutualFriendList)(nil),                       // 2: CPlayer_IncomingInviteMutualFriendList
	(*CPlayer_GetMutualFriendsForIncomingInvites_Response)(nil),          // 3: CPlayer_GetMutualFriendsForIncomingInvites_Response
	(*CPlayer_GetOwnedGames_Request)(nil),                                // 4: CPlayer_GetOwnedGames_Request
	(*CPlayer_GetOwnedGames_Response)(nil),                               // 5: CPlayer_GetOwnedGames_Response
	(*CPlayer_GetPlayNext_Request)(nil),                                  // 6: CPlayer_GetPlayNext_Request
	(*CPlayer_GetPlayNext_Response)(nil),                                 // 7: CPlayer_GetPlayNext_Response
	(*CPlayer_GetFriendsGameplayInfo_Request)(nil),                       // 8: CPlayer_GetFriendsGameplayInfo_Request
	(*CPlayer_GetFriendsGameplayInfo_Response)(nil),                      // 9: CPlayer_GetFriendsGameplayInfo_Response
	(*CPlayer_GetFriendsAppsActivity_Request)(nil),                       // 10: CPlayer_GetFriendsAppsActivity_Request
	(*CPlayer_GetFriendsAppsActivity_Response)(nil),                      // 11: CPlayer_GetFriendsAppsActivity_Response
	(*CPlayer_GetGameBadgeLevels_Request)(nil),                           // 12: CPlayer_GetGameBadgeLevels_Request
	(*CPlayer_GetGameBadgeLevels_Response)(nil),                          // 13: CPlayer_GetGameBadgeLevels_Response
	(*CPlayer_GetProfileBackground_Request)(nil),                         // 14: CPlayer_GetProfileBackground_Request
	(*ProfileItem)(nil),                                                  // 15: ProfileItem
	(*CPlayer_GetProfileBackground_Response)(nil),                        // 16: CPlayer_GetProfileBackground_Response
	(*CPlayer_SetProfileBackground_Request)(nil),                         // 17: CPlayer_SetProfileBackground_Request
	(*CPlayer_SetProfileBackground_Response)(nil),                        // 18: CPlayer_SetProfileBackground_Response
	(*CPlayer_GetMiniProfileBackground_Request)(nil),                     // 19: CPlayer_GetMiniProfileBackground_Request
	(*CPlayer_GetMiniProfileBackground_Response)(nil),                    // 20: CPlayer_GetMiniProfileBackground_Response
	(*CPlayer_SetMiniProfileBackground_Request)(nil),                     // 21: CPlayer_SetMiniProfileBackground_Request
	(*CPlayer_SetMiniProfileBackground_Response)(nil),                    // 22: CPlayer_SetMiniProfileBackground_Response
	(*CPlayer_GetAvatarFrame_Request)(nil),                               // 23: CPlayer_GetAvatarFrame_Request
	(*CPlayer_GetAvatarFrame_Response)(nil),                              // 24: CPlayer_GetAvatarFrame_Response
	(*CPlayer_SetAvatarFrame_Request)(nil),                               // 25: CPlayer_SetAvatarFrame_Request
	(*CPlayer_SetAvatarFrame_Response)(nil),                              // 26: CPlayer_SetAvatarFrame_Response
	(*CPlayer_GetAnimatedAvatar_Request)(nil),                            // 27: CPlayer_GetAnimatedAvatar_Request
	(*CPlayer_GetAnimatedAvatar_Response)(nil),                           // 28: CPlayer_GetAnimatedAvatar_Response
	(*CPlayer_SetAnimatedAvatar_Request)(nil),                            // 29: CPlayer_SetAnimatedAvatar_Request
	(*CPlayer_SetAnimatedAvatar_Response)(nil),                           // 30: CPlayer_SetAnimatedAvatar_Response
	(*CPlayer_GetProfileItemsOwned_Request)(nil),                         // 31: CPlayer_GetProfileItemsOwned_Request
	(*CPlayer_GetProfileItemsOwned_Response)(nil),                        // 32: CPlayer_GetProfileItemsOwned_Response
	(*CPlayer_GetProfileItemsEquipped_Request)(nil),                      // 33: CPlayer_GetProfileItemsEquipped_Request
	(*CPlayer_GetProfileItemsEquipped_Response)(nil),                     // 34: CPlayer_GetProfileItemsEquipped_Response
	(*CPlayer_SetEquippedProfileItemFlags_Request)(nil),                  // 35: CPlayer_SetEquippedProfileItemFlags_Request
	(*CPlayer_SetEquippedProfileItemFlags_Response)(nil),                 // 36: CPlayer_SetEquippedProfileItemFlags_Response
	(*CPlayer_GetEmoticonList_Request)(nil),                              // 37: CPlayer_GetEmoticonList_Request
	(*CPlayer_GetEmoticonList_Response)(nil),                             // 38: CPlayer_GetEmoticonList_Response
	(*CPlayer_GetAchievementsProgress_Request)(nil),                      // 39: CPlayer_GetAchievementsProgress_Request
	(*CPlayer_GetAchievementsProgress_Response)(nil),                     // 40: CPlayer_GetAchievementsProgress_Response
	(*CPlayer_PostStatusToFriends_Request)(nil),                          // 41: CPlayer_PostStatusToFriends_Request
	(*CPlayer_PostStatusToFriends_Response)(nil),                         // 42: CPlayer_PostStatusToFriends_Response
	(*CPlayer_GetPostedStatus_Request)(nil),                              // 43: CPlayer_GetPostedStatus_Request
	(*CPlayer_GetPostedStatus_Response)(nil),                             // 44: CPlayer_GetPostedStatus_Response
	(*CPlayer_DeletePostedStatus_Request)(nil),                           // 45: CPlayer_DeletePostedStatus_Request
	(*CPlayer_DeletePostedStatus_Response)(nil),                          // 46: CPlayer_DeletePostedStatus_Response
	(*CPlayer_GetLastPlayedTimes_Request)(nil),                           // 47: CPlayer_GetLastPlayedTimes_Request
	(*CPlayer_GetLastPlayedTimes_Response)(nil),                          // 48: CPlayer_GetLastPlayedTimes_Response
	(*CPlayer_AcceptSSA_Request)(nil),                                    // 49: CPlayer_AcceptSSA_Request
	(*CPlayer_AcceptSSA_Response)(nil),                                   // 50: CPlayer_AcceptSSA_Response
	(*CPlayer_GetNicknameList_Request)(nil),                              // 51: CPlayer_GetNicknameList_Request
	(*CPlayer_GetNicknameList_Response)(nil),                             // 52: CPlayer_GetNicknameList_Response
	(*CPlayer_GetPerFriendPreferences_Request)(nil),                      // 53: CPlayer_GetPerFriendPreferences_Request
	(*PerFriendPreferences)(nil),                                         // 54: PerFriendPreferences
	(*CPlayer_GetPerFriendPreferences_Response)(nil),                     // 55: CPlayer_GetPerFriendPreferences_Response
	(*CPlayer_SetPerFriendPreferences_Request)(nil),                      // 56: CPlayer_SetPerFriendPreferences_Request
	(*CPlayer_SetPerFriendPreferences_Response)(nil),                     // 57: CPlayer_SetPerFriendPreferences_Response
	(*CPlayer_AddFriend_Request)(nil),                                    // 58: CPlayer_AddFriend_Request
	(*CPlayer_AddFriend_Response)(nil),                                   // 59: CPlayer_AddFriend_Response
	(*CPlayer_RemoveFriend_Request)(nil),                                 // 60: CPlayer_RemoveFriend_Request
	(*CPlayer_RemoveFriend_Response)(nil),                                // 61: CPlayer_RemoveFriend_Response
	(*CPlayer_IgnoreFriend_Request)(nil),                                 // 62: CPlayer_IgnoreFriend_Request
	(*CPlayer_IgnoreFriend_Response)(nil),                                // 63: CPlayer_IgnoreFriend_Response
	(*CPlayer_GetCommunityPreferences_Request)(nil),                      // 64: CPlayer_GetCommunityPreferences_Request
	(*CPlayer_CommunityPreferences)(nil),                                 // 65: CPlayer_CommunityPreferences
	(*CPlayer_GetCommunityPreferences_Response)(nil),                     // 66: CPlayer_GetCommunityPreferences_Response
	(*CPlayer_SetCommunityPreferences_Request)(nil),                      // 67: CPlayer_SetCommunityPreferences_Request
	(*CPlayer_SetCommunityPreferences_Response)(nil),                     // 68: CPlayer_SetCommunityPreferences_Response
	(*CPlayer_GetNewSteamAnnouncementState_Request)(nil),                 // 69: CPlayer_GetNewSteamAnnouncementState_Request
	(*CPlayer_GetNewSteamAnnouncementState_Response)(nil),                // 70: CPlayer_GetNewSteamAnnouncementState_Response
	(*CPlayer_UpdateSteamAnnouncementLastRead_Request)(nil),              // 71: CPlayer_UpdateSteamAnnouncementLastRead_Request
	(*CPlayer_UpdateSteamAnnouncementLastRead_Response)(nil),             // 72: CPlayer_UpdateSteamAnnouncementLastRead_Response
	(*CPlayer_GetPrivacySettings_Request)(nil),                           // 73: CPlayer_GetPrivacySettings_Request
	(*CPrivacySettings)(nil),                                             // 74: CPrivacySettings
	(*CPlayer_GetPrivacySettings_Response)(nil),                          // 75: CPlayer_GetPrivacySettings_Response
	(*CPlayer_GetDurationControl_Request)(nil),                           // 76: CPlayer_GetDurationControl_Request
	(*CPlayer_GetDurationControl_Response)(nil),                          // 77: CPlayer_GetDurationControl_Response
	(*CPlayer_LastPlayedTimes_Notification)(nil),                         // 78: CPlayer_LastPlayedTimes_Notification
	(*CPlayer_FriendNicknameChanged_Notification)(nil),                   // 79: CPlayer_FriendNicknameChanged_Notification
	(*CPlayer_FriendEquippedProfileItemsChanged_Notification)(nil),       // 80: CPlayer_FriendEquippedProfileItemsChanged_Notification
	(*CPlayer_NewSteamAnnouncementState_Notification)(nil),               // 81: CPlayer_NewSteamAnnouncementState_Notification
	(*CPlayer_CommunityPreferencesChanged_Notification)(nil),             // 82: CPlayer_CommunityPreferencesChanged_Notification
	(*CPlayer_PerFriendPreferencesChanged_Notification)(nil),             // 83: CPlayer_PerFriendPreferencesChanged_Notification
	(*CPlayer_PrivacySettingsChanged_Notification)(nil),                  // 84: CPlayer_PrivacySettingsChanged_Notification
	(*CPlayer_GetOwnedGames_Response_Game)(nil),                          // 85: CPlayer_GetOwnedGames_Response.Game
	(*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo)(nil),  // 86: CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	(*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo)(nil),      // 87: CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
	(*CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime)(nil),       // 88: CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
	(*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo)(nil),       // 89: CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	(*CPlayer_GetGameBadgeLevels_Response_Badge)(nil),                    // 90: CPlayer_GetGameBadgeLevels_Response.Badge
	(*CPlayer_GetEmoticonList_Response_Emoticon)(nil),                    // 91: CPlayer_GetEmoticonList_Response.Emoticon
	(*CPlayer_GetAchievementsProgress_Response_AchievementProgress)(nil), // 92: CPlayer_GetAchievementsProgress_Response.AchievementProgress
	(*CPlayer_GetLastPlayedTimes_Response_Game)(nil),                     // 93: CPlayer_GetLastPlayedTimes_Response.Game
	(*CPlayer_GetNicknameList_Response_PlayerNickname)(nil),              // 94: CPlayer_GetNicknameList_Response.PlayerNickname
	(*NoResponse)(nil),      // 95: NoResponse
}
var file_steammessages_player_steamclient_proto_depIdxs = []int32{
	2,  // 0: CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists:type_name -> CPlayer_IncomingInviteMutualFriendList
	85, // 1: CPlayer_GetOwnedGames_Response.games:type_name -> CPlayer_GetOwnedGames_Response.Game
	87, // 2: CPlayer_GetFriendsGameplayInfo_Response.your_info:type_name -> CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
	86, // 3: CPlayer_GetFriendsGameplayInfo_Response.in_game:type_name -> CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	86, // 4: CPlayer_GetFriendsGameplayInfo_Response.played_recently:type_name -> CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	86, // 5: CPlayer_GetFriendsGameplayInfo_Response.played_ever:type_name -> CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	86, // 6: CPlayer_GetFriendsGameplayInfo_Response.owns:type_name -> CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	86, // 7: CPlayer_GetFriendsGameplayInfo_Response.in_wishlist:type_name -> CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	89, // 8: CPlayer_GetFriendsAppsActivity_Response.trending:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 9: CPlayer_GetFriendsAppsActivity_Response.recent_purchases:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 10: CPlayer_GetFriendsAppsActivity_Response.unowned:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 11: CPlayer_GetFriendsAppsActivity_Response.popular:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 12: CPlayer_GetFriendsAppsActivity_Response.dont_forget:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 13: CPlayer_GetFriendsAppsActivity_Response.being_discussed:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 14: CPlayer_GetFriendsAppsActivity_Response.new_to_group:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	89, // 15: CPlayer_GetFriendsAppsActivity_Response.returned_to_group:type_name -> CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo
	90, // 16: CPlayer_GetGameBadgeLevels_Response.badges:type_name -> CPlayer_GetGameBadgeLevels_Response.Badge
	15, // 17: CPlayer_GetProfileBackground_Response.profile_background:type_name -> ProfileItem
	15, // 18: CPlayer_GetMiniProfileBackground_Response.profile_background:type_name -> ProfileItem
	15, // 19: CPlayer_GetAvatarFrame_Response.avatar_frame:type_name -> ProfileItem
	15, // 20: CPlayer_GetAnimatedAvatar_Response.avatar:type_name -> ProfileItem
	15, // 21: CPlayer_GetProfileItemsOwned_Response.profile_backgrounds:type_name -> ProfileItem
	15, // 22: CPlayer_GetProfileItemsOwned_Response.mini_profile_backgrounds:type_name -> ProfileItem
	15, // 23: CPlayer_GetProfileItemsOwned_Response.avatar_frames:type_name -> ProfileItem
	15, // 24: CPlayer_GetProfileItemsOwned_Response.animated_avatars:type_name -> ProfileItem
	15, // 25: CPlayer_GetProfileItemsOwned_Response.profile_modifiers:type_name -> ProfileItem
	15, // 26: CPlayer_GetProfileItemsEquipped_Response.profile_background:type_name -> ProfileItem
	15, // 27: CPlayer_GetProfileItemsEquipped_Response.mini_profile_background:type_name -> ProfileItem
	15, // 28: CPlayer_GetProfileItemsEquipped_Response.avatar_frame:type_name -> ProfileItem
	15, // 29: CPlayer_GetProfileItemsEquipped_Response.animated_avatar:type_name -> ProfileItem
	15, // 30: CPlayer_GetProfileItemsEquipped_Response.profile_modifier:type_name -> ProfileItem
	91, // 31: CPlayer_GetEmoticonList_Response.emoticons:type_name -> CPlayer_GetEmoticonList_Response.Emoticon
	92, // 32: CPlayer_GetAchievementsProgress_Response.achievement_progress:type_name -> CPlayer_GetAchievementsProgress_Response.AchievementProgress
	93, // 33: CPlayer_GetLastPlayedTimes_Response.games:type_name -> CPlayer_GetLastPlayedTimes_Response.Game
	94, // 34: CPlayer_GetNicknameList_Response.nicknames:type_name -> CPlayer_GetNicknameList_Response.PlayerNickname
	0,  // 35: PerFriendPreferences.notifications_showingame:type_name -> ENotificationSetting
	0,  // 36: PerFriendPreferences.notifications_showonline:type_name -> ENotificationSetting
	0,  // 37: PerFriendPreferences.notifications_showmessages:type_name -> ENotificationSetting
	0,  // 38: PerFriendPreferences.sounds_showingame:type_name -> ENotificationSetting
	0,  // 39: PerFriendPreferences.sounds_showonline:type_name -> ENotificationSetting
	0,  // 40: PerFriendPreferences.sounds_showmessages:type_name -> ENotificationSetting
	0,  // 41: PerFriendPreferences.notifications_sendmobile:type_name -> ENotificationSetting
	54, // 42: CPlayer_GetPerFriendPreferences_Response.preferences:type_name -> PerFriendPreferences
	54, // 43: CPlayer_SetPerFriendPreferences_Request.preferences:type_name -> PerFriendPreferences
	65, // 44: CPlayer_GetCommunityPreferences_Response.preferences:type_name -> CPlayer_CommunityPreferences
	65, // 45: CPlayer_SetCommunityPreferences_Request.preferences:type_name -> CPlayer_CommunityPreferences
	74, // 46: CPlayer_GetPrivacySettings_Response.privacy_settings:type_name -> CPrivacySettings
	93, // 47: CPlayer_LastPlayedTimes_Notification.games:type_name -> CPlayer_GetLastPlayedTimes_Response.Game
	65, // 48: CPlayer_CommunityPreferencesChanged_Notification.preferences:type_name -> CPlayer_CommunityPreferences
	54, // 49: CPlayer_PerFriendPreferencesChanged_Notification.preferences:type_name -> PerFriendPreferences
	74, // 50: CPlayer_PrivacySettingsChanged_Notification.privacy_settings:type_name -> CPrivacySettings
	88, // 51: CPlayer_GetFriendsAppsActivity_Response.AppFriendsInfo.friends:type_name -> CPlayer_GetFriendsAppsActivity_Response.FriendPlayTime
	1,  // 52: Player.GetMutualFriendsForIncomingInvites:input_type -> CPlayer_GetMutualFriendsForIncomingInvites_Request
	4,  // 53: Player.GetOwnedGames:input_type -> CPlayer_GetOwnedGames_Request
	6,  // 54: Player.GetPlayNext:input_type -> CPlayer_GetPlayNext_Request
	8,  // 55: Player.GetFriendsGameplayInfo:input_type -> CPlayer_GetFriendsGameplayInfo_Request
	10, // 56: Player.GetFriendsAppsActivity:input_type -> CPlayer_GetFriendsAppsActivity_Request
	12, // 57: Player.GetGameBadgeLevels:input_type -> CPlayer_GetGameBadgeLevels_Request
	14, // 58: Player.GetProfileBackground:input_type -> CPlayer_GetProfileBackground_Request
	17, // 59: Player.SetProfileBackground:input_type -> CPlayer_SetProfileBackground_Request
	19, // 60: Player.GetMiniProfileBackground:input_type -> CPlayer_GetMiniProfileBackground_Request
	21, // 61: Player.SetMiniProfileBackground:input_type -> CPlayer_SetMiniProfileBackground_Request
	23, // 62: Player.GetAvatarFrame:input_type -> CPlayer_GetAvatarFrame_Request
	25, // 63: Player.SetAvatarFrame:input_type -> CPlayer_SetAvatarFrame_Request
	27, // 64: Player.GetAnimatedAvatar:input_type -> CPlayer_GetAnimatedAvatar_Request
	29, // 65: Player.SetAnimatedAvatar:input_type -> CPlayer_SetAnimatedAvatar_Request
	31, // 66: Player.GetProfileItemsOwned:input_type -> CPlayer_GetProfileItemsOwned_Request
	33, // 67: Player.GetProfileItemsEquipped:input_type -> CPlayer_GetProfileItemsEquipped_Request
	35, // 68: Player.SetEquippedProfileItemFlags:input_type -> CPlayer_SetEquippedProfileItemFlags_Request
	37, // 69: Player.GetEmoticonList:input_type -> CPlayer_GetEmoticonList_Request
	39, // 70: Player.GetAchievementsProgress:input_type -> CPlayer_GetAchievementsProgress_Request
	41, // 71: Player.PostStatusToFriends:input_type -> CPlayer_PostStatusToFriends_Request
	43, // 72: Player.GetPostedStatus:input_type -> CPlayer_GetPostedStatus_Request
	45, // 73: Player.DeletePostedStatus:input_type -> CPlayer_DeletePostedStatus_Request
	47, // 74: Player.ClientGetLastPlayedTimes:input_type -> CPlayer_GetLastPlayedTimes_Request
	49, // 75: Player.AcceptSSA:input_type -> CPlayer_AcceptSSA_Request
	51, // 76: Player.GetNicknameList:input_type -> CPlayer_GetNicknameList_Request
	53, // 77: Player.GetPerFriendPreferences:input_type -> CPlayer_GetPerFriendPreferences_Request
	56, // 78: Player.SetPerFriendPreferences:input_type -> CPlayer_SetPerFriendPreferences_Request
	58, // 79: Player.AddFriend:input_type -> CPlayer_AddFriend_Request
	60, // 80: Player.RemoveFriend:input_type -> CPlayer_RemoveFriend_Request
	62, // 81: Player.IgnoreFriend:input_type -> CPlayer_IgnoreFriend_Request
	64, // 82: Player.GetCommunityPreferences:input_type -> CPlayer_GetCommunityPreferences_Request
	67, // 83: Player.SetCommunityPreferences:input_type -> CPlayer_SetCommunityPreferences_Request
	69, // 84: Player.GetNewSteamAnnouncementState:input_type -> CPlayer_GetNewSteamAnnouncementState_Request
	71, // 85: Player.UpdateSteamAnnouncementLastRead:input_type -> CPlayer_UpdateSteamAnnouncementLastRead_Request
	73, // 86: Player.GetPrivacySettings:input_type -> CPlayer_GetPrivacySettings_Request
	76, // 87: Player.GetDurationControl:input_type -> CPlayer_GetDurationControl_Request
	78, // 88: PlayerClient.NotifyLastPlayedTimes:input_type -> CPlayer_LastPlayedTimes_Notification
	79, // 89: PlayerClient.NotifyFriendNicknameChanged:input_type -> CPlayer_FriendNicknameChanged_Notification
	80, // 90: PlayerClient.NotifyFriendEquippedProfileItemsChanged:input_type -> CPlayer_FriendEquippedProfileItemsChanged_Notification
	81, // 91: PlayerClient.NotifyNewSteamAnnouncementState:input_type -> CPlayer_NewSteamAnnouncementState_Notification
	82, // 92: PlayerClient.NotifyCommunityPreferencesChanged:input_type -> CPlayer_CommunityPreferencesChanged_Notification
	83, // 93: PlayerClient.NotifyPerFriendPreferencesChanged:input_type -> CPlayer_PerFriendPreferencesChanged_Notification
	84, // 94: PlayerClient.NotifyPrivacyPrivacySettingsChanged:input_type -> CPlayer_PrivacySettingsChanged_Notification
	3,  // 95: Player.GetMutualFriendsForIncomingInvites:output_type -> CPlayer_GetMutualFriendsForIncomingInvites_Response
	5,  // 96: Player.GetOwnedGames:output_type -> CPlayer_GetOwnedGames_Response
	7,  // 97: Player.GetPlayNext:output_type -> CPlayer_GetPlayNext_Response
	9,  // 98: Player.GetFriendsGameplayInfo:output_type -> CPlayer_GetFriendsGameplayInfo_Response
	11, // 99: Player.GetFriendsAppsActivity:output_type -> CPlayer_GetFriendsAppsActivity_Response
	13, // 100: Player.GetGameBadgeLevels:output_type -> CPlayer_GetGameBadgeLevels_Response
	16, // 101: Player.GetProfileBackground:output_type -> CPlayer_GetProfileBackground_Response
	18, // 102: Player.SetProfileBackground:output_type -> CPlayer_SetProfileBackground_Response
	20, // 103: Player.GetMiniProfileBackground:output_type -> CPlayer_GetMiniProfileBackground_Response
	22, // 104: Player.SetMiniProfileBackground:output_type -> CPlayer_SetMiniProfileBackground_Response
	24, // 105: Player.GetAvatarFrame:output_type -> CPlayer_GetAvatarFrame_Response
	26, // 106: Player.SetAvatarFrame:output_type -> CPlayer_SetAvatarFrame_Response
	28, // 107: Player.GetAnimatedAvatar:output_type -> CPlayer_GetAnimatedAvatar_Response
	30, // 108: Player.SetAnimatedAvatar:output_type -> CPlayer_SetAnimatedAvatar_Response
	32, // 109: Player.GetProfileItemsOwned:output_type -> CPlayer_GetProfileItemsOwned_Response
	34, // 110: Player.GetProfileItemsEquipped:output_type -> CPlayer_GetProfileItemsEquipped_Response
	36, // 111: Player.SetEquippedProfileItemFlags:output_type -> CPlayer_SetEquippedProfileItemFlags_Response
	38, // 112: Player.GetEmoticonList:output_type -> CPlayer_GetEmoticonList_Response
	40, // 113: Player.GetAchievementsProgress:output_type -> CPlayer_GetAchievementsProgress_Response
	42, // 114: Player.PostStatusToFriends:output_type -> CPlayer_PostStatusToFriends_Response
	44, // 115: Player.GetPostedStatus:output_type -> CPlayer_GetPostedStatus_Response
	46, // 116: Player.DeletePostedStatus:output_type -> CPlayer_DeletePostedStatus_Response
	48, // 117: Player.ClientGetLastPlayedTimes:output_type -> CPlayer_GetLastPlayedTimes_Response
	50, // 118: Player.AcceptSSA:output_type -> CPlayer_AcceptSSA_Response
	52, // 119: Player.GetNicknameList:output_type -> CPlayer_GetNicknameList_Response
	55, // 120: Player.GetPerFriendPreferences:output_type -> CPlayer_GetPerFriendPreferences_Response
	57, // 121: Player.SetPerFriendPreferences:output_type -> CPlayer_SetPerFriendPreferences_Response
	59, // 122: Player.AddFriend:output_type -> CPlayer_AddFriend_Response
	61, // 123: Player.RemoveFriend:output_type -> CPlayer_RemoveFriend_Response
	63, // 124: Player.IgnoreFriend:output_type -> CPlayer_IgnoreFriend_Response
	66, // 125: Player.GetCommunityPreferences:output_type -> CPlayer_GetCommunityPreferences_Response
	68, // 126: Player.SetCommunityPreferences:output_type -> CPlayer_SetCommunityPreferences_Response
	70, // 127: Player.GetNewSteamAnnouncementState:output_type -> CPlayer_GetNewSteamAnnouncementState_Response
	72, // 128: Player.UpdateSteamAnnouncementLastRead:output_type -> CPlayer_UpdateSteamAnnouncementLastRead_Response
	75, // 129: Player.GetPrivacySettings:output_type -> CPlayer_GetPrivacySettings_Response
	77, // 130: Player.GetDurationControl:output_type -> CPlayer_GetDurationControl_Response
	95, // 131: PlayerClient.NotifyLastPlayedTimes:output_type -> NoResponse
	95, // 132: PlayerClient.NotifyFriendNicknameChanged:output_type -> NoResponse
	95, // 133: PlayerClient.NotifyFriendEquippedProfileItemsChanged:output_type -> NoResponse
	95, // 134: PlayerClient.NotifyNewSteamAnnouncementState:output_type -> NoResponse
	95, // 135: PlayerClient.NotifyCommunityPreferencesChanged:output_type -> NoResponse
	95, // 136: PlayerClient.NotifyPerFriendPreferencesChanged:output_type -> NoResponse
	95, // 137: PlayerClient.NotifyPrivacyPrivacySettingsChanged:output_type -> NoResponse
	95, // [95:138] is the sub-list for method output_type
	52, // [52:95] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_steammessages_player_steamclient_proto_init() }
func file_steammessages_player_steamclient_proto_init() {
	if File_steammessages_player_steamclient_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_steammessages_player_steamclient_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetMutualFriendsForIncomingInvites_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_IncomingInviteMutualFriendList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetMutualFriendsForIncomingInvites_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetOwnedGames_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetOwnedGames_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetPlayNext_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetPlayNext_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetFriendsGameplayInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetFriendsGameplayInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetFriendsAppsActivity_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetFriendsAppsActivity_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetGameBadgeLevels_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetGameBadgeLevels_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetProfileBackground_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ProfileItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetProfileBackground_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetProfileBackground_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetProfileBackground_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetMiniProfileBackground_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetMiniProfileBackground_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetMiniProfileBackground_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetMiniProfileBackground_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetAvatarFrame_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetAvatarFrame_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetAvatarFrame_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetAvatarFrame_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetAnimatedAvatar_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetAnimatedAvatar_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetAnimatedAvatar_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetAnimatedAvatar_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetProfileItemsOwned_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetProfileItemsOwned_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetProfileItemsEquipped_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetProfileItemsEquipped_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetEquippedProfileItemFlags_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetEquippedProfileItemFlags_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetEmoticonList_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetEmoticonList_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetAchievementsProgress_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetAchievementsProgress_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_PostStatusToFriends_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_PostStatusToFriends_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetPostedStatus_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetPostedStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_DeletePostedStatus_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_DeletePostedStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetLastPlayedTimes_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetLastPlayedTimes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_AcceptSSA_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_AcceptSSA_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetNicknameList_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetNicknameList_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetPerFriendPreferences_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*PerFriendPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetPerFriendPreferences_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetPerFriendPreferences_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetPerFriendPreferences_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_AddFriend_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_AddFriend_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_RemoveFriend_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_RemoveFriend_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_IgnoreFriend_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_IgnoreFriend_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetCommunityPreferences_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_CommunityPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetCommunityPreferences_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetCommunityPreferences_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_SetCommunityPreferences_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetNewSteamAnnouncementState_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetNewSteamAnnouncementState_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_UpdateSteamAnnouncementLastRead_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_UpdateSteamAnnouncementLastRead_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetPrivacySettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*CPrivacySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetPrivacySettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetDurationControl_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetDurationControl_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_LastPlayedTimes_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_FriendNicknameChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_FriendEquippedProfileItemsChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_NewSteamAnnouncementState_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_CommunityPreferencesChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_PerFriendPreferencesChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_PrivacySettingsChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetOwnedGames_Response_Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetFriendsAppsActivity_Response_FriendPlayTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetFriendsAppsActivity_Response_AppFriendsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetGameBadgeLevels_Response_Badge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetEmoticonList_Response_Emoticon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetAchievementsProgress_Response_AchievementProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetLastPlayedTimes_Response_Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamclient_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*CPlayer_GetNicknameList_Response_PlayerNickname); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_player_steamclient_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   94,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_player_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_player_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_player_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_player_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_player_steamclient_proto = out.File
	file_steammessages_player_steamclient_proto_rawDesc = nil
	file_steammessages_player_steamclient_proto_goTypes = nil
	file_steammessages_player_steamclient_proto_depIdxs = nil
}
